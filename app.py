"""
Crystal Bay Travel - SAMO API Integration Platform
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Flask —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π WebAPI –∏ SamoAPI
"""

import os
import time
import logging
from datetime import datetime
from flask import Flask, render_template, request, jsonify, redirect, url_for, session
from flask_sqlalchemy import SQLAlchemy
from flask_cors import CORS
from sqlalchemy.orm import DeclarativeBase

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Base(DeclarativeBase):
    pass

# Initialize Flask app
app = Flask(__name__)
app.secret_key = os.environ.get("SESSION_SECRET", "crystal-bay-secret-key")

# CORS configuration
CORS(app, origins=["*"])

# Database configuration
app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL", "sqlite:///crystal_bay.db")
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    'pool_pre_ping': True,
    "pool_recycle": 300,
}

# Initialize database
from models import Base
db = SQLAlchemy(app, model_class=Base)

# Import models and API integrations
try:
    from models import *
    from samo_integration import SamoIntegration
    from samo_data_preloader import initialize_preloader, get_preloader, preload_samo_data
    from app_api import register_api_routes
except ImportError as e:
    logger.warning(f"Import warning: {e}")

# Initialize integrations
try:
    samo_api = SamoIntegration()
    logger.info("SAMO API integration initialized successfully")
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö SAMO API
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö SAMO API...")
    try:
        preload_result = preload_samo_data(samo_api)
        if preload_result.get('success_count', 0) > 0:
            logger.info(f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {preload_result.get('success_count')}/{preload_result.get('total_requests')} –∑–∞–ø—Ä–æ—Å–æ–≤")
            logger.info(f"üè® –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–µ–ª–µ–π: {len(preload_result.get('hotels_list', []))}")
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        
except Exception as e:
    logger.error(f"SAMO API initialization failed: {e}")
    samo_api = None

# === MAIN ROUTES ===

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –¥–∞—à–±–æ—Ä–¥"""
    try:
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            'total_orders': 0,
            'active_tours': 0,
            'currencies_count': 0,
            'api_status': 'unavailable'
        }
        
        if samo_api:
            try:
                health = samo_api.health_check()
                if health.get('samo_api_available'):
                    stats['api_status'] = 'connected'
                    stats['currencies_count'] = 3
                else:
                    stats['api_status'] = 'requires_production'
            except Exception as e:
                logger.error(f"Health check error: {e}")
                stats['api_status'] = 'error'
        
        return render_template('dashboard.html',
                             active_page='dashboard',
                             page_title='–î–∞—à–±–æ—Ä–¥',
                             stats=stats)
    except Exception as e:
        logger.error(f"Dashboard error: {e}")
        return render_template('dashboard.html',
                             active_page='dashboard',
                             page_title='–î–∞—à–±–æ—Ä–¥',
                             stats={})

@app.route('/dashboard')
def dashboard():
    """–î–∞—à–±–æ—Ä–¥ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    return index()  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

@app.route('/tours')
def tours_search():
    """–ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ SAMO API"""
    return render_template('tours_search.html',
                         active_page='tours',
                         page_title='–ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤')

@app.route('/hotels')
def hotels_search():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π"""
    return render_template('hotels_search.html',
                         active_page='hotels',
                         page_title='–ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π')

@app.route('/vietnam')
def vietnam_search():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ –≤–æ –í—å–µ—Ç–Ω–∞–º"""
    return render_template('vietnam_search.html',
                         active_page='vietnam',
                         page_title='–¢—É—Ä—ã –≤–æ –í—å–µ—Ç–Ω–∞–º')

@app.route('/orders')
def orders():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏"""
    return render_template('orders.html',
                         active_page='orders',
                         page_title='–ó–∞—è–≤–∫–∏')

@app.route('/ai-assistant')  
def ai_assistant():
    """–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SAMO"""
    return render_template('ai_assistant.html',
                         active_page='ai-assistant',
                         page_title='–ò–ò-–ü–æ–º–æ—â–Ω–∏–∫')

@app.route('/api-testing')
def api_testing():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏)"""
    return render_template('api_testing.html',
                         active_page='api-testing',
                         page_title='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API')

@app.route('/demo')
def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('demo.html',
                         active_page='demo',
                         page_title='–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è')

@app.route('/settings')
def settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    return render_template('settings.html',
                         active_page='settings',
                         page_title='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã')

# === API ROUTES ===

@app.route('/api/samo/<action>', methods=['GET', 'POST'])
def samo_api_proxy(action):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö SAMO API –∫–æ–º–∞–Ω–¥"""
    try:
        if request.method == 'GET':
            params = request.args.to_dict()
        else:
            params = request.get_json() or {}
        
        if not samo_api:
            return jsonify({
                'success': False,
                'error': 'SAMO API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                'action': action
            })
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ SAMO API
        result = samo_api._make_request(action, params)
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"SAMO API error for {action}: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'action': action
        }), 500

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@app.route('/api/samo/test', methods=['POST'])
def samo_test_endpoint():
    """Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SAMO API"""
    try:
        data = request.get_json() or {}
        action = data.get('action', 'SearchTour_CURRENCIES')
        
        if not samo_api:
            return jsonify({
                'success': False,
                'error': 'SAMO API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                'action': action
            })
        
        result = samo_api._make_request(action, data)
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"SAMO test error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/samo/health', methods=['GET'])
def samo_health_endpoint():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è SAMO API"""
    try:
        if not samo_api:
            return jsonify({
                'samo_api_available': False,
                'error': 'SAMO API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            })
        
        result = samo_api.health_check()
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"SAMO health check error: {e}")
        return jsonify({
            'samo_api_available': False,
            'error': str(e)
        }), 500

@app.route('/api/samo/execute', methods=['POST'])
def samo_execute_endpoint():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ SAMO API"""
    try:
        data = request.get_json() or {}
        action = data.get('action')
        params = data.get('params', {})
        
        if not action:
            return jsonify({
                'success': False,
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
            })
        
        if not samo_api:
            return jsonify({
                'success': False,
                'error': 'SAMO API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                'action': action
            })
        
        result = samo_api._make_request(action, params)
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"SAMO execute error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# @app.route('/api/webapi/<action>', methods=['GET', 'POST'])  
# def webapi_proxy(action):
#     """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö WebAPI –∫–æ–º–∞–Ω–¥ - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ"""
#     return jsonify({'success': False, 'error': 'WebAPI integration in development'})

@app.route('/api/orders', methods=['GET', 'POST'])
def orders_api():
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏"""
    try:
        if request.method == 'GET':
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫
            filters = request.args.to_dict()
            orders = samo_api.get_orders(filters) if samo_api else {'success': False, 'error': 'SAMO API not initialized', 'data': []}
            return jsonify(orders)
        
        elif request.method == 'POST':
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            order_data = request.get_json()
            result = samo_api.create_order(order_data) if samo_api else {'success': False, 'error': 'SAMO API not initialized'}
            return jsonify(result)
            
    except Exception as e:
        logger.error(f"Orders API error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/orders/<order_id>', methods=['GET', 'PUT', 'DELETE'])
def order_detail_api(order_id):
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–æ–π"""
    try:
        if request.method == 'GET':
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏
            order = samo_api.get_order_details(order_id) if samo_api else {'success': False, 'error': 'SAMO API not initialized'}
            return jsonify(order)
        
        elif request.method == 'PUT':
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
            update_data = request.get_json()
            result = samo_api.update_order(order_id, update_data) if samo_api else {'success': False, 'error': 'SAMO API not initialized'}
            return jsonify(result)
        
        elif request.method == 'DELETE':
            # –û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏
            result = samo_api.cancel_order(order_id) if samo_api else {'success': False, 'error': 'SAMO API not initialized'}
            return jsonify(result)
            
    except Exception as e:
        logger.error(f"Order detail API error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/ai/chat', methods=['POST'])
def ai_chat():
    """–ò–ò —á–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SAMO —Å–∏—Å—Ç–µ–º–æ–π"""
    try:
        data = request.get_json()
        message = data.get('message', '')
        
        if not message:
            return jsonify({
                'success': False,
                'error': 'Message is required'
            }), 400
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ò–ò - –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞
        response = {
            'success': True,
            'message': f'–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}',
            'ai_response': '–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!'
        }
        return jsonify(response)
        
    except Exception as e:
        logger.error(f"AI chat error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
        samo_status = samo_api.health_check() if samo_api else False
        webapi_status = False  # webapi.health_check() if webapi else False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_status = True
        try:
            db.session.execute('SELECT 1')
            db.session.commit()
        except:
            db_status = False
        
        return jsonify({
            'success': True,
            'timestamp': datetime.now().isoformat(),
            'services': {
                'samo_api': samo_status,
                'webapi': webapi_status,
                'database': db_status,
                'application': True
            }
        })
        
    except Exception as e:
        logger.error(f"Health check error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# === SYSTEM MANAGEMENT API ===

@app.route('/api/system/clear-cache', methods=['POST'])
def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ Flask/Redis/Memcached
        logger.info("Cache cleared by user request")
        
        return jsonify({
            'success': True,
            'message': '–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω'
        })
        
    except Exception as e:
        logger.error(f"Clear cache error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/system/clear-demo-data', methods=['POST'])
def clear_demo_data():
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –û—á–∏—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ mock —Ñ–∞–π–ª–∞
        import samo_mock_data
        
        # –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        samo_mock_data.CURRENCIES_DATA = []
        samo_mock_data.STATES_DATA = []
        samo_mock_data.TOWNFROMS_DATA = []
        samo_mock_data.STARS_DATA = []
        samo_mock_data.MEALS_DATA = []
        samo_mock_data.DEMO_TOURS = []
        samo_mock_data.DEMO_ORDERS = {"GetOrders": []}
        
        logger.info("Demo data cleared successfully")
        
        return jsonify({
            'success': True,
            'message': '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ API –¥–∞–Ω–Ω—ã–µ.'
        })
        
    except Exception as e:
        logger.error(f"Clear demo data error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/system/reset', methods=['POST'])
def reset_system():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –û—á–∏—â–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db.drop_all()
        db.create_all()
        
        # –û—á–∏—â–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        import samo_mock_data
        samo_mock_data.CURRENCIES_DATA = []
        samo_mock_data.STATES_DATA = []
        samo_mock_data.TOWNFROMS_DATA = []
        samo_mock_data.STARS_DATA = []
        samo_mock_data.MEALS_DATA = []
        samo_mock_data.DEMO_TOURS = []
        samo_mock_data.DEMO_ORDERS = {"GetOrders": []}
        
        logger.warning("System reset performed - all data cleared")
        
        return jsonify({
            'success': True,
            'message': '–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞'
        })
        
    except Exception as e:
        logger.error(f"System reset error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# === ERROR HANDLERS ===

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–∫–∏"""
    return render_template('error.html',
                         error_code=404,
                         error_message="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–∫–∏"""
    logger.error(f"Internal server error: {error}")
    return render_template('error.html',
                         error_code=500,
                         error_message="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), 500

# === ADDITIONAL API ROUTES ===

# Tours API routes integrated directly below
    
# API —Ñ–∏–ª—å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ SAMO
@app.route('/api/tours/filters', methods=['GET'])
def get_tour_filters():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ SAMO API"""
    try:
        if not samo_api:
            return jsonify({
                'success': False,
                'error': 'SAMO API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
                'filters': {}
            })
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ SAMO API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        currencies_result = samo_api.get_currencies()
        destinations_result = samo_api.get_states()
        cities_result = samo_api.get_departure_cities()
        stars_result = samo_api.get_stars()
        meals_result = samo_api.get_meals()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        failed_requests = []
        if not currencies_result.get('success'):
            failed_requests.append('currencies')
        if not destinations_result.get('success'):
            failed_requests.append('destinations')
        if not cities_result.get('success'):
            failed_requests.append('cities')
        if not stars_result.get('success'):
            failed_requests.append('stars')
        if not meals_result.get('success'):
            failed_requests.append('meals')
        
        if failed_requests:
            return jsonify({
                'success': False,
                'error': f'SAMO API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è: {", ".join(failed_requests)}',
                'failed_requests': failed_requests,
                'requires_production': True
            })
        
        # –ï—Å–ª–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω—ã, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        return jsonify({
            'success': True,
            'filters': {
                'currencies': currencies_result.get('data', {}),
                'destinations': destinations_result.get('data', {}),
                'departure_cities': cities_result.get('data', {}),
                'stars': stars_result.get('data', {}),
                'meals': meals_result.get('data', {}),
                'hotels': []
            },
            'loaded_from': 'SAMO_API',
            'production_ready': True
        })
        
    except Exception as e:
        logger.error(f"Tour filters error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'filters': {}
        })

# –°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è search_tours —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è –≤ —Ä–∞–∑–¥–µ–ª–µ TOUR SEARCH API

# API –∑–∞—è–≤–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ app_api.py

# === STARTUP ===

# === TOUR SEARCH API ===

def is_production_environment():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ production —Å–µ—Ä–≤–µ—Ä–µ"""
    # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π SAMO —Ç–æ–∫–µ–Ω
    samo_token = os.environ.get('SAMO_OAUTH_TOKEN', '')
    if samo_token and len(samo_token) > 20:  # –ù–∞—Å—Ç–æ—è—â–∏–π —Ç–æ–∫–µ–Ω –¥–ª–∏–Ω–Ω–µ–µ
        return True
        
    return False

def get_tour_details(tour_id, search_params):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω"""
    try:
        if not samo_api or not tour_id:
            return None
            
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç—É—Ä–µ
        detail_params = search_params.copy()
        detail_params.update({
            'TOURID': str(tour_id),
            'PRICESHOW': '1',
            'CALCPRICE': '1', 
            'DETAILED': '1',
            'GETPRICE': '1'
        })
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        methods_to_try = ['SearchTour_PRICES', 'SearchTour_DETAIL', 'GetTour_DETAIL', 'SearchTour_TOURS', 'SearchTour_ALL']
        
        for method in methods_to_try:
            app.logger.info(f"–ü–æ–ª—É—á–∞—é –¥–µ—Ç–∞–ª–∏ —Ç—É—Ä–∞ {tour_id} —á–µ—Ä–µ–∑ {method}")
            result = samo_api._make_request(method, detail_params)
            
            if result.get('success') and result.get('data'):
                tour_data = result.get('data')
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
                tour_info = None
                if isinstance(tour_data, dict):
                    if 'tours' in tour_data and tour_data['tours']:
                        tour_info = tour_data['tours'][0] if isinstance(tour_data['tours'], list) else tour_data['tours']
                    elif 'price' in tour_data or 'cost' in tour_data:
                        tour_info = tour_data
                    elif str(tour_id) in tour_data:
                        tour_info = tour_data[str(tour_id)]
                elif isinstance(tour_data, list) and len(tour_data) > 0:
                    tour_info = tour_data[0]
                
                if tour_info and isinstance(tour_info, dict):
                    detailed_info = {
                        'price': tour_info.get('price', tour_info.get('cost', 0)),
                        'currency': tour_info.get('currency', search_params.get('CURRENCYINC', 'KZT')),
                        'hotel': tour_info.get('hotel', tour_info.get('hotelName', '')),
                        'city': tour_info.get('city', tour_info.get('resort', '')),
                        'destination': tour_info.get('destination', tour_info.get('country', '')),
                        'meals': tour_info.get('meals', tour_info.get('meal', '')),
                        'description': tour_info.get('description', ''),
                        'departure_date': tour_info.get('departure_date', tour_info.get('date', ''))
                    }
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if any(v for v in detailed_info.values() if v not in ['', 0]):
                        return detailed_info
        
        return None
        
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–∞ {tour_id}: {e}")
        return None

@app.route('/api/tours/search', methods=['POST'])
def search_tours_universal():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ SAMO API"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞', 'success': False}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not data.get('departure_city') or not data.get('destination'):
            return jsonify({
                'error': '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                'success': False
            }), 400
        
        app.logger.info(f"–ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤: {data}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º SAMO API
        if not samo_api:
            return jsonify({
                'tours': [],
                'count': 0,
                'error': 'SAMO API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ SAMO_OAUTH_TOKEN.',
                'success': False
            })
        
        app.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ SAMO API —Å —Ç–æ–∫–µ–Ω–æ–º: {os.environ.get('SAMO_OAUTH_TOKEN', '')[:12]}...")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è SAMO API
        search_params = {
            'TOWNFROMINC': data.get('departure_city'),
            'STATEINC': data.get('destination'),
            'CURRENCYINC': data.get('currency', 'KZT'),
            'NIGHTS': data.get('nights', '7'),
            'ADULT': data.get('adults', '2')
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if data.get('checkin_date') or data.get('CHECKIN'):
            search_params['CHECKIN'] = data.get('checkin_date') or data.get('CHECKIN')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
        if data.get('children') and int(data.get('children', 0)) > 0:
            search_params['CHILD'] = data.get('children')
        elif data.get('CHILD'):
            search_params['CHILD'] = data.get('CHILD')
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã –∏ –ø–∏—Ç–∞–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if data.get('stars') or data.get('STARS'):
            search_params['STARS'] = data.get('stars') or data.get('STARS')
        if data.get('meals') or data.get('MEAL'):
            search_params['MEALS'] = data.get('meals') or data.get('MEAL')
            
        # –í–ê–ñ–ù–û: –§–ª–∞–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞—è —Ü–µ–Ω—ã
        search_params.update({
            'PRICESHOW': '1',
            'CALCPRICE': '1', 
            'DETAILED': '1',
            'GETPRICE': '1',
            'WITHPRICE': '1',
            'INCLUDEPRICE': '1',
            'FULLINFO': '1',
            'LANG': 'ru',
            'FORMAT': 'FULL'
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        search_params['LIMIT'] = '20'  
        search_params['PAGESIZE'] = '20'
        
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π 
        methods_to_try = ['SearchTour_DETAIL', 'SearchTour_FULL', 'SearchTour_ALL', 'SearchTour_TOURS']
        
        for method in methods_to_try:
            app.logger.info(f"–ü—Ä–æ–±—É—é –º–µ—Ç–æ–¥ {method} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {search_params}")
            result = samo_api._make_request(method, search_params)
            
            if result.get('success'):
                tours_data = result.get('data', {})
                tours = []
                
                app.logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç SAMO API: {type(tours_data)}")
                app.logger.info(f"–î–∞–Ω–Ω—ã–µ –æ—Ç SAMO API (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤): {str(tours_data)[:500]}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞ SAMO API
                if isinstance(tours_data, dict):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
                    tours = (tours_data.get(method, []) or 
                            tours_data.get('tours', []) or 
                            tours_data.get('data', []) or
                            tours_data.get('result', []))
                elif isinstance(tours_data, list):
                    tours = tours_data
                
                app.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—É—Ä–æ–≤ –∏–∑ {method}: {len(tours) if isinstance(tours, list) else 0}")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏  
                if tours and isinstance(tours, list):
                    app.logger.info(f"–ü–µ—Ä–≤—ã–π —Ç—É—Ä: {tours[0] if len(tours) > 0 else '–Ω–µ—Ç'}")
                    app.logger.info(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—É—Ä–æ–≤ –æ—Ç SAMO API: {len(tours)}")
                    
                if tours and isinstance(tours, list) and len(tours) > 0:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—É—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    processed_tours = []
                    for tour in tours:
                        if isinstance(tour, dict):
                            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –∏–∑ SAMO API
                            processed_tour = {
                                'id': tour.get('id', tour.get('tourId', tour.get('ID', ''))),
                                'name': tour.get('name', tour.get('title', tour.get('NAME', tour.get('TOUR_NAME', '–¢—É—Ä')))),
                                'destination': tour.get('destination', tour.get('country', tour.get('STATE', tour.get('COUNTRY', '')))),
                                'city': tour.get('city', tour.get('resort', tour.get('CITY', tour.get('RESORT', '')))),
                                'hotel': tour.get('hotel', tour.get('hotelName', tour.get('HOTEL', tour.get('HOTEL_NAME', '')))),
                                'stars': tour.get('stars', tour.get('hotelStars', tour.get('STARS', tour.get('HOTEL_STARS', 4)))),
                                'nights': tour.get('nights', tour.get('duration', tour.get('NIGHTS', data.get('nights', 7)))),
                                'price': tour.get('price', tour.get('cost', tour.get('PRICE', tour.get('COST', 0)))),
                                'currency': tour.get('currency', tour.get('CURRENCY', search_params.get('CURRENCYINC', 'KZT'))),
                                'departure_date': tour.get('departure_date', tour.get('date', tour.get('DATE', tour.get('CHECKIN', '')))),
                                'meals': tour.get('meals', tour.get('meal', tour.get('MEAL', tour.get('MEALS', '')))),
                                'description': tour.get('description', tour.get('DESCRIPTION', ''))
                            }
                            
                            # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–µ—Ç–∞–ª–µ–π - –æ–Ω–∏ –∑–∞–º–µ–¥–ª—è—é—Ç –ø–æ–∏—Å–∫
                            # TODO: –ù–∞–π—Ç–∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –æ—Ç SAMO API
                                    
                            processed_tours.append(processed_tour)
                    
                    app.logger.info(f"–ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —Ç—É—Ä–æ–≤: {len(processed_tours)}")
                    
                    return jsonify({
                        'tours': processed_tours,
                        'count': len(processed_tours),
                        'success': True,
                        'source': f'SAMO_API_{method}',
                        'search_params': search_params,
                        'original_count': len(tours),
                        'processed_count': len(processed_tours)
                    })
                else:
                    app.logger.info(f"–ú–µ—Ç–æ–¥ {method} –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç—É—Ä—ã –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
        
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç—É—Ä—ã, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏—á–∏–Ω—É
        app.logger.warning("–ù–∏ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ SAMO API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç—É—Ä—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º health check –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        health_result = samo_api.health_check()
        if not health_result.get('samo_api_available'):
            error_msg = health_result.get('error', 'SAMO API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
            if '403' in str(error_msg):
                return jsonify({
                    'tours': [],
                    'count': 0,
                    'success': False,
                    'error': 'SAMO API –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (403). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OAuth —Ç–æ–∫–µ–Ω –∏–ª–∏ IP whitelist.',
                    'samo_error': True
                })
            else:
                return jsonify({
                    'tours': [],
                    'count': 0,
                    'success': False,
                    'error': f'SAMO API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {error_msg}',
                    'samo_error': True
                })
        
        # API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        return jsonify({
            'tours': [],
            'count': 0,
            'success': True,
            'message': '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É —Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.',
            'search_params': search_params
        })
        
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {e}")
        return jsonify({
            'error': str(e),
            'tours': [],
            'count': 0,
            'success': False
        }), 500

# –£–¥–∞–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è create_working_tours - —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ SAMO API

@app.route('/api/tours/hotels', methods=['GET', 'POST'])
def search_hotels():
    """–ü–æ–∏—Å–∫ –æ—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ SAMO API"""
    try:
        if request.method == 'POST':
            data = request.get_json() or {}
        else:
            data = request.args.to_dict()
        
        if not samo_api:
            return jsonify({
                'success': False,
                'error': 'SAMO API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            })
        
        search_params = {
            'STATEINC': data.get('destination', '15'),  # –í—å–µ—Ç–Ω–∞–º
            'STARS': data.get('stars', ''),
            'CURRENCYINC': data.get('currency', 'KZT')
        }
        
        search_params = {k: v for k, v in search_params.items() if v}
        
        result = samo_api._make_request('SearchTour_HOTELS', search_params)
        
        if result.get('success'):
            hotels_data = result.get('data', {})
            hotels_list = []
            
            if 'SearchTour_HOTELS' in hotels_data:
                raw_hotels = hotels_data['SearchTour_HOTELS']
                if isinstance(raw_hotels, list):
                    for hotel in raw_hotels:
                        processed_hotel = {
                            'id': hotel.get('id', ''),
                            'name': hotel.get('name', '–û—Ç–µ–ª—å'),
                            'destination': hotel.get('destination', '–í—å–µ—Ç–Ω–∞–º'),
                            'stars': hotel.get('stars', 4),
                            'description': hotel.get('description', ''),
                            'location': hotel.get('location', '')
                        }
                        hotels_list.append(processed_hotel)
            
            return jsonify({
                'success': True,
                'hotels': hotels_list,
                'total_found': len(hotels_list)
            })
        else:
            return jsonify({
                'success': False,
                'error': result.get('error', '–û—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'),
                'requires_production': True
            })
            
    except Exception as e:
        logger.error(f"Search hotels error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/tours/prices', methods=['POST'])  
def search_prices():
    """–ü–æ–∏—Å–∫ —Ü–µ–Ω –Ω–∞ —Ç—É—Ä—ã —á–µ—Ä–µ–∑ SAMO API"""
    try:
        data = request.get_json() or {}
        
        if not samo_api:
            return jsonify({
                'success': False,
                'error': 'SAMO API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'
            })
        
        price_params = {
            'TOWNFROMINC': data.get('departure_city', '1344'),
            'STATEINC': data.get('destination', '15'),
            'CURRENCYINC': data.get('currency', 'KZT'),
            'CHECKIN': data.get('checkin_date', ''),
            'NIGHTS': data.get('nights', ''),
            'ADULT': data.get('adults', '2'),
            'CHILD': data.get('children', '0'),
            'HOTEL': data.get('hotel_id', '')
        }
        
        price_params = {k: v for k, v in price_params.items() if v}
        
        result = samo_api._make_request('SearchTour_PRICES', price_params)
        
        if result.get('success'):
            return jsonify({
                'success': True,
                'prices': result.get('data', {}),
                'search_params': price_params
            })
        else:
            return jsonify({
                'success': False,
                'error': result.get('error', '–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'),
                'requires_production': True
            })
            
    except Exception as e:
        logger.error(f"Search prices error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    with app.app_context():
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        db.create_all()
        logger.info("Database tables created")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        logger.info("Checking API connections...")
        samo_health = samo_api.health_check() if samo_api else False
        
        logger.info(f"SAMO API: {'‚úì' if samo_health else '‚úó'}")
        
        logger.info("Crystal Bay Travel started successfully!")
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.run(host="0.0.0.0", port=5000, debug=True)@app.route("/production-status")
def production_status():
    """Production status page"""
    return render_template("production_status.html", active_page="production-status", page_title="Production Status")

@app.route("/reference-data")
def reference_data_page():
    """–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SAMO"""
    return render_template("reference_data.html", active_page="reference-data", page_title="–°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

@app.route("/tours")
@app.route("/universal-tours")
def universal_tour_search():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –º–µ–∂–¥—É –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏ SAMO"""
    return render_template("universal_tour_search.html", active_page="tours", page_title="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤")

@app.route("/advanced-tours")
def advanced_tour_search():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —Å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ SAMO"""
    return render_template("advanced_tour_search.html", active_page="tours", page_title="–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤")

@app.route('/api/advanced-tours/search', methods=['POST'])
def api_advanced_tour_search():
    """API endpoint –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞', 'success': False}), 400
        
        app.logger.info(f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤: {data}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        data['PRICESHOW'] = '1'
        data['CALCPRICE'] = '1'
        data['DETAILED'] = '1'
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∏—Å–∫–∞
        return search_tours_universal()
        
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {e}")
        return jsonify({
            'error': str(e),
            'tours': [],
            'count': 0,
            'success': False
        }), 500

@app.route('/api/tours/search', methods=['POST'])
def api_universal_tour_search():
    """API endpoint –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞', 'success': False}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not data.get('departure_city') or not data.get('destination'):
            return jsonify({
                'error': '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
                'success': False
            }), 400
        
        app.logger.info(f"–ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤: {data}")
        
        # SAMO API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ development - –∏—Å–ø–æ–ª—å–∑—É–µ–º SAMO —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ
        demo_tours = create_samo_compatible_demo_tours(data)
        
        return jsonify({
            'tours': demo_tours,
            'count': len(demo_tours),
            'message': 'Development —Å–µ—Ä–≤–µ—Ä. –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.',
            'search_params': search_params,
            'requires_production': True,
            'success': True
        })
        
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {e}")
        return jsonify({
            'error': str(e),
            'tours': [],
            'count': 0,
            'success': False
        }), 500




# –°–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ SAMO API
@app.route('/api/samo/reference-data', methods=['GET'])
def get_samo_reference_data():
    """–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Kazakhstan ‚Üí Vietnam"""
    reference_data = {
        'departure_cities': {
            'almaty': {'id': '1344', 'name': '–ê–ª–º–∞—Ç—ã', 'country': 'Kazakhstan'},
            'astana': {'id': '2', 'name': '–ê—Å—Ç–∞–Ω–∞', 'country': 'Kazakhstan'}
        },
        'currencies': {
            'KZT': {'id': 'KZT', 'name': '–ö–∞–∑–∞—Ö—Å–∫–∏–π —Ç–µ–Ω–≥–µ', 'symbol': '‚Ç∏'},
            'USD': {'id': 'USD', 'name': '–î–æ–ª–ª–∞—Ä –°–®–ê', 'symbol': '$'},
            'RUB': {'id': 'RUB', 'name': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', 'symbol': '‚ÇΩ'}
        },
        'destinations': {
            'vietnam': {'id': '15', 'name': '–í—å–µ—Ç–Ω–∞–º', 'region': 'Asia'}
        },
        'parameters': {
            'TOWNFROMINC': '1344',
            'STATEINC': '15', 
            'CURRENCYINC': 'KZT',
            'LANG': 'ru'
        }
    }
    return jsonify({'success': True, 'reference_data': reference_data, 'market': 'Kazakhstan ‚Üí Vietnam'})

@app.route('/health', methods=['GET'])
def production_health_check():
    """Health check endpoint –¥–ª—è production –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        status = {
            'status': 'healthy',
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'services': {
                'flask_app': 'running',
                'database': 'unknown',
                'samo_api': 'unknown'
            },
            'version': '1.0.0',
            'environment': 'production' if os.environ.get('FLASK_ENV') == 'production' else 'development'
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            db.session.execute(db.text('SELECT 1'))
            status['services']['database'] = 'connected'
        except Exception as e:
            status['services']['database'] = f'error: {str(e)[:50]}'
            status['status'] = 'degraded'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ SAMO API
        if samo_api:
            try:
                health = samo_api.health_check()
                if health.get('samo_api_available'):
                    status['services']['samo_api'] = 'connected'
                else:
                    status['services']['samo_api'] = 'blocked_ip'
            except Exception as e:
                status['services']['samo_api'] = f'error: {str(e)[:50]}'
        else:
            status['services']['samo_api'] = 'not_initialized'
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        preloader = get_preloader()
        if preloader:
            preload_status = preloader.get_preload_status()
            status['preload'] = {
                'loaded': preload_status.get('is_loaded', False),
                'hotels_count': preload_status.get('hotels_count', 0),
                'success_rate': f"{preload_status.get('success_count', 0)}/{preload_status.get('total_requests', 0)}"
            }
        
        return jsonify(status), 200 if status['status'] == 'healthy' else 503
        
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e),
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        }), 500

# –í—Ä–µ–º–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫
@app.route('/api/samo/orders/sync', methods=['POST'])
def sync_samo_orders_temp():
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –∏–∑ SAMO API"""
    try:
        from samo_orders_integration import SamoOrdersIntegration
        
        data = request.get_json() or {}
        date_from = data.get('date_from')
        date_to = data.get('date_to')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        samo_integration = SamoOrdersIntegration()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –Ω–∞–ø—Ä—è–º—É—é  
        if data.get('get_data'):
            orders_data = samo_integration.get_orders_data(date_from, date_to)
            if orders_data.get('success'):
                return jsonify({
                    'success': True,
                    'orders': orders_data.get('data', []),
                    'message': f'–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders_data.get("data", []))} –∑–∞—è–≤–æ–∫',
                    'source': orders_data.get('source')
                })
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        result = samo_integration.sync_orders_to_database(date_from, date_to)
        
        if result.get('success'):
            return jsonify({
                'success': True,
                'message': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
                'stats': result.get('stats'),
                'source': result.get('source'),
                'sync_date': result.get('sync_date')
            })
        else:
            return jsonify({
                'success': False,
                'error': result.get('error', 'Unknown error during sync'),
                'details': result.get('details')
            }), 400
        
    except Exception as e:
        logger.error(f"Error syncing SAMO orders: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# === SETTINGS API ROUTES ===

@app.route('/api/settings', methods=['GET'])
def get_settings():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        from settings_service import settings_service
        category = request.args.get('category')
        settings = settings_service.get_all(category=category, include_secrets=False)
        return jsonify({
            'success': True,
            'settings': settings,
            'categories': settings_service.get_categories()
        })
    except Exception as e:
        logger.error(f"Error getting settings: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/settings', methods=['POST'])
def save_settings():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        from settings_service import settings_service
        data = request.get_json()
        
        saved_count = 0
        for key, value in data.items():
            if settings_service.set(key, value):
                saved_count += 1
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_service.clear_cache()
        
        return jsonify({
            'success': True,
            'message': f'–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            'saved_count': saved_count
        })
    except Exception as e:
        logger.error(f"Error saving settings: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/settings/export', methods=['GET'])
def export_settings():
    """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from settings_service import settings_service
        settings = settings_service.get_all(include_secrets=True)
        return jsonify({
            'success': True,
            'settings': settings
        })
    except Exception as e:
        logger.error(f"Error exporting settings: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/settings/import', methods=['POST'])
def import_settings():
    """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from settings_service import settings_service
        data = request.get_json()
        settings = data.get('settings', [])
        
        imported_count = 0
        for setting in settings:
            key = setting.get('key')
            value = setting.get('value')
            description = setting.get('description')
            category = setting.get('category', 'general')
            is_secret = setting.get('is_secret', False)
            
            if key and settings_service.set(key, value, description, category, is_secret):
                imported_count += 1
        
        return jsonify({
            'success': True,
            'message': f'–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –Ω–∞—Å—Ç—Ä–æ–µ–∫',
            'imported_count': imported_count
        })
    except Exception as e:
        logger.error(f"Error importing settings: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/test-connection/<api_type>', methods=['GET'])
def test_connection(api_type):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API"""
    try:
        from settings_service import settings_service
        
        if api_type == 'samo':
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º SAMO API
            api_url = settings_service.get('samo_api_url')
            oauth_token = settings_service.get('samo_oauth_token')
            
            if not api_url or not oauth_token:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã URL –∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–ª—è SAMO API'
                }), 400
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            import requests
            try:
                response = requests.post(api_url, 
                    data={'samo_action': 'api', 'samo_command': 'SearchTour_CURRENCIES', 'samo_oauth_token': oauth_token},
                    timeout=10)
                
                if response.status_code == 200:
                    return jsonify({'success': True, 'message': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å SAMO API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'})
                else:
                    return jsonify({'success': False, 'error': f'HTTP {response.status_code}'})
            except requests.RequestException as e:
                return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}'})
                
        elif api_type == 'webapi':
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º WebAPI
            base_url = settings_service.get('webapi_base_url')
            bearer_token = settings_service.get('webapi_bearer_token')
            
            if not base_url or not bearer_token:
                return jsonify({
                    'success': False,
                    'error': '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã URL –∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–ª—è WebAPI'
                }), 400
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ ClaimSearch
            import requests
            try:
                headers = {'Authorization': f'Bearer {bearer_token}'}
                response = requests.get(f"{base_url}/MyOffice/ClaimSearch?take=1", 
                    headers=headers, timeout=10)
                
                if response.status_code == 200:
                    return jsonify({'success': True, 'message': '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å WebAPI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'})
                else:
                    return jsonify({'success': False, 'error': f'HTTP {response.status_code}'})
            except requests.RequestException as e:
                return jsonify({'success': False, 'error': f'–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}'})
                
        else:
            return jsonify({
                'success': False,
                'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø API'
            }), 400
            
    except Exception as e:
        logger.error(f"Error testing {api_type} connection: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º API —Ä–æ—É—Ç—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
# try:
#     register_api_routes(app)
#     logger.info("‚úÖ API routes registered successfully")
# except Exception as e:
#     logger.error(f"‚ùå Failed to register API routes: {e}")

