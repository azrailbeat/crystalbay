#!/usr/bin/env python3
"""
SAMO API Lead Integration Module
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏–∑ SAMO API Crystal Bay Travel
"""

import logging
import os
from datetime import datetime, timedelta
from typing import List, Dict, Optional
from crystal_bay_samo_api import CrystalBaySAMOAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SAMOLeadsIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SAMO API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SAMO API"""
        self.samo_api = CrystalBaySAMOAPI()
        self.is_connected = False
        
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SAMO API"""
        try:
            result = self.samo_api.get_townfroms()
            if 'error' not in result:
                self.is_connected = True
                logger.info("‚úÖ SAMO API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è SAMO API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {result.get('error', 'Unknown error')}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SAMO API: {e}")
            return False
    
    def load_recent_bookings(self, days_back: int = 30) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ SAMO API
        
        Args:
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫/–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            end_date = datetime.now()
            start_date = end_date - timedelta(days=days_back)
            
            date_from = start_date.strftime('%Y-%m-%d')
            date_to = end_date.strftime('%Y-%m-%d')
            
            logger.info(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å {date_from} –ø–æ {date_to}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            bookings_result = self.samo_api.get_bookings(date_from=date_from, date_to=date_to)
            
            if 'error' in bookings_result:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {bookings_result['error']}")
                return []
            
            bookings = bookings_result.get('bookings', [])
            logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(bookings)} –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–æ–∫
            leads = []
            for booking in bookings:
                lead = self._convert_booking_to_lead(booking)
                if lead:
                    leads.append(lead)
            
            return leads
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return []
    
    def search_tours_for_lead(self, search_params: Dict) -> List[Dict]:
        """
        –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
        
        Args:
            search_params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤
        """
        try:
            logger.info(f"üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {search_params}")
            
            # –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤ —á–µ—Ä–µ–∑ SAMO API
            result = self.samo_api.search_tour_prices(search_params)
            
            if 'error' in result:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {result['error']}")
                return []
            
            tours = result.get('tours', [])
            logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(tours)} —Ç—É—Ä–æ–≤")
            
            return tours
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤: {e}")
            return []
    
    def _convert_booking_to_lead(self, booking: Dict) -> Optional[Dict]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ SAMO –≤ —Ñ–æ—Ä–º–∞—Ç –∑–∞—è–≤–∫–∏ Crystal Bay
        
        Args:
            booking: –î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ SAMO API
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∏ –∏–ª–∏ None
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            customer_name = booking.get('customer_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç')
            email = booking.get('customer_email', '')
            phone = booking.get('customer_phone', '')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞
            tour_details = []
            if booking.get('destination'):
                tour_details.append(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {booking['destination']}")
            if booking.get('hotel'):
                tour_details.append(f"–û—Ç–µ–ª—å: {booking['hotel']}")
            if booking.get('departure_date'):
                tour_details.append(f"–î–∞—Ç—ã: {booking['departure_date']}")
            if booking.get('nights'):
                tour_details.append(f"–ù–æ—á–µ–π: {booking['nights']}")
            if booking.get('adults'):
                tour_details.append(f"–í–∑—Ä–æ—Å–ª—ã—Ö: {booking['adults']}")
            if booking.get('children'):
                tour_details.append(f"–î–µ—Ç–µ–π: {booking['children']}")
            
            notes = "–ó–∞—è–≤–∫–∞ –∏–∑ SAMO API:\n" + "\n".join(tour_details)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            samo_status = booking.get('status', 'new')
            status = self._map_samo_status_to_crystal_bay(samo_status)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–≥–∏
            tags = ['SAMO API']
            if booking.get('destination'):
                tags.append(booking['destination'])
            if booking.get('tour_type'):
                tags.append(booking['tour_type'])
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
            lead = {
                'id': f"samo_{booking.get('booking_id', datetime.now().timestamp())}",
                'customer_name': customer_name,
                'email': email,
                'phone': phone,
                'source': 'SAMO API',
                'status': status,
                'notes': notes,
                'tags': tags,
                'created_at': booking.get('created_at', datetime.now().isoformat()),
                'updated_at': datetime.now().isoformat(),
                'samo_booking_id': booking.get('booking_id'),
                'price': booking.get('total_amount', 0),
                'currency': booking.get('currency', 'USD')
            }
            
            return lead
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def _map_samo_status_to_crystal_bay(self, samo_status: str) -> str:
        """
        –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ SAMO –≤ —Å—Ç–∞—Ç—É—Å—ã Crystal Bay
        
        Args:
            samo_status: –°—Ç–∞—Ç—É—Å –∏–∑ SAMO API
            
        Returns:
            –°—Ç–∞—Ç—É—Å Crystal Bay
        """
        status_mapping = {
            'new': 'new',
            'confirmed': 'confirmed', 
            'paid': 'confirmed',
            'cancelled': 'closed',
            'completed': 'closed',
            'pending': 'in_progress',
            'processing': 'in_progress'
        }
        
        return status_mapping.get(samo_status.lower(), 'new')
    
    def sync_leads_to_system(self, leads_service) -> int:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫–∏ –∏–∑ SAMO –≤ —Å–∏—Å—Ç–µ–º—É Crystal Bay
        
        Args:
            leads_service: –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
            
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        """
        try:
            if not self.test_connection():
                logger.warning("‚ö†Ô∏è SAMO API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")
                return 0
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –∏–∑ SAMO
            samo_leads = self.load_recent_bookings(days_back=30)
            
            if not samo_leads:
                logger.info("üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ SAMO API –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return 0
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            synced_count = 0
            for lead in samo_leads:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞—è–≤–∫–∞
                    existing_lead = leads_service.get_lead_by_samo_id(lead.get('samo_booking_id'))
                    
                    if existing_lead:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
                        leads_service.update_lead(existing_lead['id'], lead)
                        logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ {lead['customer_name']}")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
                        leads_service.create_lead(lead)
                        logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ {lead['customer_name']}")
                    
                    synced_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ {lead.get('customer_name', 'Unknown')}: {e}")
                    continue
            
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synced_count} –∑–∞—è–≤–æ–∫ –∏–∑ SAMO API")
            return synced_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
samo_integration = SAMOLeadsIntegration()

def get_samo_integration() -> SAMOLeadsIntegration:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SAMO API"""
    return samo_integration