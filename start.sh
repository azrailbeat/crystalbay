#!/bin/bash

# =======================================================
# Crystal Bay Travel - Quick Start Script
# =======================================================

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Project info
PROJECT_NAME="Crystal Bay Travel"
VERSION="1.0.0"

# Function to print colored messages
print_message() {
    color=$1
    message=$2
    echo -e "${color}${message}${NC}"
}

print_header() {
    echo
    echo "======================================================"
    print_message "$BLUE" "  $PROJECT_NAME - Multi-Channel Travel System"
    print_message "$BLUE" "  Version: $VERSION"
    echo "======================================================"
    echo
}

print_step() {
    print_message "$YELLOW" "‚ñ∫ $1"
}

print_success() {
    print_message "$GREEN" "‚úì $1"
}

print_error() {
    print_message "$RED" "‚úó $1"
}

print_info() {
    print_message "$BLUE" "‚Ñπ $1"
}

# Check if Docker is installed
check_docker() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    print_success "Docker –Ω–∞–π–¥–µ–Ω: $(docker --version)"
    
    # Check if Docker daemon is running
    if ! docker info &> /dev/null; then
        print_error "Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker daemon –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        exit 1
    fi
}

# Check environment file
check_env_file() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -f ".env" ]; then
        print_info "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –∏–∑ —à–∞–±–ª–æ–Ω–∞..."
        cp .env.example .env
        print_info "–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
        echo
        print_message "$YELLOW" "–í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ .env:"
        print_message "$YELLOW" "  - OPENAI_API_KEY"
        print_message "$YELLOW" "  - TELEGRAM_BOT_TOKEN"
        print_message "$YELLOW" "  - SESSION_SECRET"
        echo
        
        read -p "–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞..." dummy
    else
        print_success "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"
    fi
    
    # Check for required variables
    missing_vars=()
    
    if ! grep -q "OPENAI_API_KEY=.*[^[:space:]]" .env; then
        missing_vars+=("OPENAI_API_KEY")
    fi
    
    if ! grep -q "TELEGRAM_BOT_TOKEN=.*[^[:space:]]" .env; then
        missing_vars+=("TELEGRAM_BOT_TOKEN")
    fi
    
    if ! grep -q "SESSION_SECRET=.*[^[:space:]]" .env; then
        missing_vars+=("SESSION_SECRET")
    fi
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missing_vars[*]}"
        print_info "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –ø–æ–ª—è"
        exit 1
    fi
    
    print_success "–í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

# Build and start services
start_services() {
    print_step "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    docker-compose down --remove-orphans 2>/dev/null || true
    
    print_step "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    print_step "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d
    
    print_success "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
}

# Wait for services to be healthy
wait_for_services() {
    print_step "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # Wait for database
    echo -n "  –ñ–¥–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"
    max_attempts=30
    attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if docker-compose exec -T db pg_isready -U crystal_bay -q 2>/dev/null; then
            break
        fi
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -eq $max_attempts ]; then
        print_error "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        exit 1
    fi
    
    echo
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞"
    
    # Wait for web application
    echo -n "  –ñ–¥–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s http://localhost:5000/health > /dev/null 2>&1; then
            break
        fi
        echo -n "."
        sleep 3
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -eq $max_attempts ]; then
        print_error "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs web"
        exit 1
    fi
    
    echo
    print_success "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ"
}

# Show service status
show_status() {
    print_step "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose ps
    echo
    
    print_step "Health check..."
    if curl -s http://localhost:5000/health | grep -q '"status":"healthy"'; then
        print_success "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
    else
        print_error "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
        print_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ: http://localhost:5000/health"
    fi
}

# Show access information
show_access_info() {
    echo
    print_message "$GREEN" "üéâ Crystal Bay Travel —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
    echo
    print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:"
    print_info "  üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞:      http://localhost:5000"
    print_info "  üíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å: http://localhost:5000/dashboard"  
    print_info "  üè® –ö–∞—Ç–∞–ª–æ–≥ —Ç—É—Ä–æ–≤:         http://localhost:5000/tours"
    print_info "  üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞–º–∏:     http://localhost:5000/leads"
    print_info "  üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:             http://localhost:5000/analytics"
    print_info "  ‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:            http://localhost:5000/settings"
    echo
    print_info "üîç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:"
    print_info "  Health check:             http://localhost:5000/health"
    print_info "  API —Å—Ç–∞—Ç—É—Å:               http://localhost:5000/api/status"
    print_info "  SAMO API —Ç–µ—Å—Ç:            http://localhost:5000/api/samo/test"
    echo
    print_info "üìä –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    print_info "  –õ–æ–≥–∏:          docker-compose logs -f"
    print_info "  –°—Ç–∞—Ç—É—Å:        docker-compose ps"
    print_info "  –û—Å—Ç–∞–Ω–æ–≤–∫–∞:     docker-compose down"
    print_info "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:    docker-compose restart"
    echo
}

# Main execution
main() {
    print_header
    
    # Check system requirements
    check_docker
    check_env_file
    
    # Start services
    start_services
    wait_for_services
    
    # Show results
    show_status
    show_access_info
    
    print_message "$GREEN" "–ó–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ! üöÄ"
    echo
}

# Run main function
main "$@"