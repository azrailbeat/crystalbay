#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã Crystal Bay Travel
"""

import requests
import json
import sys
from datetime import datetime

def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    
    base_url = "http://localhost:5000"
    results = {
        "timestamp": datetime.now().isoformat(),
        "status": "unknown",
        "checks": {}
    }
    
    print("üè• –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´ Crystal Bay Travel")
    print("=" * 50)
    
    # 1. –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    try:
        response = requests.get(f"{base_url}/health", timeout=5)
        if response.status_code == 200:
            results["checks"]["health_endpoint"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
            print("‚úÖ Health endpoint: –†–∞–±–æ—Ç–∞–µ—Ç")
        else:
            results["checks"]["health_endpoint"] = f"‚ùå HTTP {response.status_code}"
            print(f"‚ùå Health endpoint: HTTP {response.status_code}")
    except Exception as e:
        results["checks"]["health_endpoint"] = f"‚ùå {str(e)}"
        print(f"‚ùå Health endpoint: {str(e)}")
        return results
    
    # 2. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    try:
        response = requests.get(f"{base_url}/", timeout=5)
        if response.status_code == 200 and "Crystal Bay" in response.text:
            results["checks"]["main_page"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
            print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –†–∞–±–æ—Ç–∞–µ—Ç")
        else:
            results["checks"]["main_page"] = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"
            print("‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
    except Exception as e:
        results["checks"]["main_page"] = f"‚ùå {str(e)}"
        print(f"‚ùå –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {str(e)}")
    
    # 3. API –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    endpoints = [
        "/api/diagnostics/environment",
        "/api/diagnostics/server", 
        "/api/diagnostics/network",
        "/api/diagnostics/samo"
    ]
    
    api_working = 0
    for endpoint in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=10)
            if response.status_code == 200:
                api_working += 1
                results["checks"][f"api{endpoint.split('/')[-1]}"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
                print(f"‚úÖ API {endpoint.split('/')[-1]}: –†–∞–±–æ—Ç–∞–µ—Ç")
            else:
                results["checks"][f"api{endpoint.split('/')[-1]}"] = f"‚ùå HTTP {response.status_code}"
                print(f"‚ùå API {endpoint.split('/')[-1]}: HTTP {response.status_code}")
        except Exception as e:
            results["checks"][f"api{endpoint.split('/')[-1]}"] = f"‚ùå {str(e)}"
            print(f"‚ùå API {endpoint.split('/')[-1]}: {str(e)}")
    
    # 4. SAMO API —Å—Ç–∞—Ç—É—Å
    try:
        response = requests.get(f"{base_url}/api/diagnostics/samo", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if "tests" in data and "api_endpoint" in data["tests"]:
                api_test = data["tests"]["api_endpoint"]
                if api_test["status_code"] == 403:
                    results["checks"]["samo_api"] = "‚ö†Ô∏è IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                    print("‚ö†Ô∏è SAMO API: IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
                elif api_test["status_code"] == 200:
                    results["checks"]["samo_api"] = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
                    print("‚úÖ SAMO API: –†–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    results["checks"]["samo_api"] = f"‚ùå HTTP {api_test['status_code']}"
                    print(f"‚ùå SAMO API: HTTP {api_test['status_code']}")
    except Exception as e:
        results["checks"]["samo_api"] = f"‚ùå {str(e)}"
        print(f"‚ùå SAMO API: {str(e)}")
    
    # 5. Curl —Ñ—É–Ω–∫—Ü–∏–∏
    try:
        payload = {"method": "SearchTour_CURRENCIES", "params": ""}
        response = requests.post(f"{base_url}/api/samo/execute-curl", json=payload, timeout=15)
        if response.status_code == 200:
            results["checks"]["curl_functions"] = "‚úÖ –†–∞–±–æ—Ç–∞—é—Ç"
            print("‚úÖ Curl —Ñ—É–Ω–∫—Ü–∏–∏: –†–∞–±–æ—Ç–∞—é—Ç")
        else:
            results["checks"]["curl_functions"] = f"‚ùå HTTP {response.status_code}"
            print(f"‚ùå Curl —Ñ—É–Ω–∫—Ü–∏–∏: HTTP {response.status_code}")
    except Exception as e:
        results["checks"]["curl_functions"] = f"‚ùå {str(e)}"
        print(f"‚ùå Curl —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    working_count = len([v for v in results["checks"].values() if v.startswith("‚úÖ")])
    warning_count = len([v for v in results["checks"].values() if v.startswith("‚ö†Ô∏è")])
    total_count = len(results["checks"])
    
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:")
    print(f"‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç: {working_count}/{total_count}")
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}")
    
    if working_count >= total_count * 0.8:  # 80% —Ä–∞–±–æ—Ç–∞–µ—Ç
        results["status"] = "healthy"
        print("üéâ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ù–û–†–ú–ê–õ–¨–ù–û")
    elif working_count >= total_count * 0.6:  # 60% —Ä–∞–±–æ—Ç–∞–µ—Ç
        results["status"] = "degraded"
        print("‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –° –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø–ú–ò")
    else:
        results["status"] = "unhealthy"
        print("üö® –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("health_check_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ health_check_results.json")
    return results

if __name__ == "__main__":
    try:
        results = health_check()
        if results["status"] == "healthy":
            sys.exit(0)
        elif results["status"] == "degraded":
            sys.exit(1)
        else:
            sys.exit(2)
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(3)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(4)