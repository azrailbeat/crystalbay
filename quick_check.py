#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import json
import sys

def check_production_sync():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–¥–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ"""
    
    server = "46.250.234.89:5000"
    base_url = f"http://{server}"
    
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–†–û–î–ê–ö–®–ù –°–ï–†–í–ï–†–ê")
    print("=" * 40)
    print(f"üìç –°–µ—Ä–≤–µ—Ä: {server}")
    print()
    
    results = {
        "server": server,
        "tests": {},
        "status": "unknown"
    }
    
    # 1. Health check
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200 and "healthy" in response.text:
            print("‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
            results["tests"]["health"] = True
        else:
            print(f"‚ùå Health endpoint: HTTP {response.status_code}")
            results["tests"]["health"] = False
    except Exception as e:
        print(f"‚ùå Health endpoint: {str(e)}")
        results["tests"]["health"] = False
        return results
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints (–¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON)
    api_endpoints = [
        "environment", "server", "network", "samo"
    ]
    
    json_endpoints = 0
    for endpoint in api_endpoints:
        try:
            response = requests.get(f"{base_url}/api/diagnostics/{endpoint}", timeout=10)
            if response.status_code == 200:
                try:
                    response.json()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
                    print(f"‚úÖ API {endpoint}: JSON –æ—Ç–≤–µ—Ç")
                    json_endpoints += 1
                    results["tests"][f"api_{endpoint}"] = True
                except:
                    print(f"‚ùå API {endpoint}: HTML –æ—Ç–≤–µ—Ç (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)")
                    results["tests"][f"api_{endpoint}"] = False
            else:
                print(f"‚ùå API {endpoint}: HTTP {response.status_code}")
                results["tests"][f"api_{endpoint}"] = False
        except Exception as e:
            print(f"‚ùå API {endpoint}: {str(e)}")
            results["tests"][f"api_{endpoint}"] = False
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ curl —Ñ—É–Ω–∫—Ü–∏–π
    try:
        payload = {"method": "SearchTour_CURRENCIES", "params": ""}
        response = requests.post(
            f"{base_url}/api/samo/execute-curl",
            json=payload,
            timeout=15
        )
        if response.status_code == 200:
            data = response.json()
            if "command" in data and "status_code" in data:
                print("‚úÖ Curl —Ñ—É–Ω–∫—Ü–∏–∏: JSON –æ—Ç–≤–µ—Ç")
                results["tests"]["curl_functions"] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å SAMO API
                if data.get("status_code") == 403:
                    print("   ‚ö†Ô∏è  SAMO API –±–ª–æ–∫–∏—Ä—É–µ—Ç IP (–æ–∂–∏–¥–∞–µ–º–æ)")
            else:
                print("‚ùå Curl —Ñ—É–Ω–∫—Ü–∏–∏: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
                results["tests"]["curl_functions"] = False
        else:
            print(f"‚ùå Curl —Ñ—É–Ω–∫—Ü–∏–∏: HTTP {response.status_code}")
            results["tests"]["curl_functions"] = False
    except Exception as e:
        print(f"‚ùå Curl —Ñ—É–Ω–∫—Ü–∏–∏: {str(e)}")
        results["tests"]["curl_functions"] = False
    
    # 4. –ü–æ–ª—É—á–µ–Ω–∏–µ IP
    try:
        response = requests.get(f"{base_url}/api/diagnostics/server", timeout=10)
        if response.status_code == 200:
            data = response.json()
            current_ip = data.get("external_ip", "Unknown")
            print(f"üìç IP —Å–µ—Ä–≤–µ—Ä–∞: {current_ip}")
            results["current_ip"] = current_ip
    except:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP —Å–µ—Ä–≤–µ—Ä–∞")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    total_tests = len(results["tests"])
    passed_tests = sum(results["tests"].values())
    
    print()
    print("üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò")
    print("=" * 20)
    print(f"üìä –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print("üéâ –°–ï–†–í–ï–† –ü–û–õ–ù–û–°–¢–¨–Æ –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù")
        results["status"] = "synced"
        return_code = 0
    elif passed_tests >= total_tests * 0.7:
        print("‚ö†Ô∏è  –°–ï–†–í–ï–† –ß–ê–°–¢–ò–ß–ù–û –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù")
        print("   –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        results["status"] = "partial"
        return_code = 1
    else:
        print("‚ùå –°–ï–†–í–ï–† –ù–ï –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞")
        results["status"] = "not_synced"
        return_code = 2
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if results["status"] != "synced":
        print()
        print("üìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. ssh root@46.250.234.89")
        print("2. cd ~/crystalbay")
        print("3. docker-compose down")
        print("4. –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã app_api.py –∏ templates/samo_testing.html")
        print("5. docker-compose build --no-cache")
        print("6. docker-compose up -d")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("production_check_results.json", "w") as f:
        json.dump(results, f, indent=2)
    
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ production_check_results.json")
    
    return return_code

if __name__ == "__main__":
    try:
        exit_code = check_production_sync()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞")
        sys.exit(3)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(4)