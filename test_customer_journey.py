#!/usr/bin/env python3
"""
Customer Journey Test Suite –¥–ª—è Crystal Bay Travel System
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
"""
import requests
import json
from datetime import datetime
import time

BASE_URL = "http://localhost:5000"

class CustomerJourneyTests:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self):
        self.session = requests.Session()
        self.test_results = []
        
    def log_result(self, test_name, status, details=""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        result = {
            "test": test_name,
            "status": status,
            "timestamp": datetime.now().isoformat(),
            "details": details
        }
        self.test_results.append(result)
        print(f"[{status}] {test_name}: {details}")
        
    def test_dashboard_accessibility(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            response = self.session.get(f"{BASE_URL}/")
            if response.status_code == 200:
                if "–î–∞—à–±–æ—Ä–¥" in response.text and "Crystal Bay" in response.text:
                    self.log_result("Dashboard Accessibility", "PASS", "–î–∞—à–±–æ—Ä–¥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                else:
                    self.log_result("Dashboard Accessibility", "FAIL", "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
            else:
                self.log_result("Dashboard Accessibility", "FAIL", f"HTTP {response.status_code}")
        except Exception as e:
            self.log_result("Dashboard Accessibility", "ERROR", str(e))
            
    def test_leads_management_flow(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–¥–∞–º–∏"""
        try:
            # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–∏–¥–æ–≤
            response = self.session.get(f"{BASE_URL}/leads")
            if response.status_code != 200:
                self.log_result("Leads Management", "FAIL", f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–∏–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–Ω–±–∞–Ω –¥–æ—Å–∫–∏
            if "kanban-board" in response.text and ("–ù–æ–≤—ã–µ" in response.text or "–Ω–æ–≤—ã–µ" in response.text):
                self.log_result("Leads Kanban Board", "PASS", "–ö–∞–Ω–±–∞–Ω –¥–æ—Å–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")
            else:
                self.log_result("Leads Kanban Board", "FAIL", "–ö–∞–Ω–±–∞–Ω –¥–æ—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
            # –¢–µ—Å—Ç API —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
            lead_data = {
                "customer_name": "–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç",
                "customer_phone": "+7 777 123 45 67",
                "customer_email": "test@crystalbay.com",
                "source": "website",
                "interest": "beach",
                "notes": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
            }
            
            response = self.session.post(f"{BASE_URL}/api/leads", json=lead_data)
            if response.status_code in [200, 201]:
                self.log_result("Lead Creation API", "PASS", "–õ–∏–¥ —Å–æ–∑–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ API")
            else:
                self.log_result("Lead Creation API", "FAIL", f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞: {response.status_code}")
                
        except Exception as e:
            self.log_result("Leads Management", "ERROR", str(e))
            
    def test_tours_search_functionality(self):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤"""
        try:
            # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤
            response = self.session.get(f"{BASE_URL}/tours-search")
            if response.status_code != 200:
                self.log_result("Tours Search Page", "FAIL", f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–∏—Å–∫–∞
            if "stateinc" in response.text and "townfrominc" in response.text:
                self.log_result("Tours Search Form", "PASS", "–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            else:
                self.log_result("Tours Search Form", "FAIL", "–§–æ—Ä–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
            # –¢–µ—Å—Ç SAMO API —Å—Ç–∞—Ç—É—Å–∞
            response = self.session.get(f"{BASE_URL}/api/samo/test")
            if response.status_code == 200:
                result = response.json()
                if result.get('success'):
                    self.log_result("SAMO API Connection", "PASS", "SAMO API –ø–æ–¥–∫–ª—é—á–µ–Ω")
                else:
                    self.log_result("SAMO API Connection", "WARNING", "SAMO API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ–∂–∏–¥–∞–µ—Ç—Å—è 403)")
            else:
                self.log_result("SAMO API Connection", "FAIL", f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {response.status_code}")
                
        except Exception as e:
            self.log_result("Tours Search", "ERROR", str(e))
            
    def test_samo_testing_interface(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SAMO API"""
        try:
            response = self.session.get(f"{BASE_URL}/samo-testing")
            if response.status_code == 200:
                if "SAMO" in response.text and ("test" in response.text.lower() or "—Ç–µ—Å—Ç" in response.text.lower()):
                    self.log_result("SAMO Testing Interface", "PASS", "–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    self.log_result("SAMO Testing Interface", "FAIL", "–ù–µ–ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                self.log_result("SAMO Testing Interface", "FAIL", f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {response.status_code}")
        except Exception as e:
            self.log_result("SAMO Testing Interface", "ERROR", str(e))
            
    def test_settings_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            response = self.session.get(f"{BASE_URL}/unified-settings")
            if response.status_code == 200:
                if "SAMO API" in response.text and "Wazzup" in response.text:
                    self.log_result("Settings Interface", "PASS", "–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞")
                else:
                    self.log_result("Settings Interface", "FAIL", "–ù–µ–ø–æ–ª–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            else:
                self.log_result("Settings Interface", "FAIL", f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {response.status_code}")
        except Exception as e:
            self.log_result("Settings Management", "ERROR", str(e))
            
    def test_responsive_layout(self):
        """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –≤—ë—Ä—Å—Ç–∫–∏"""
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_0 like Mac OS X) AppleWebKit/605.1.15'
            }
            response = self.session.get(f"{BASE_URL}/", headers=headers)
            if response.status_code == 200:
                if "viewport" in response.text and "bootstrap" in response.text:
                    self.log_result("Responsive Layout", "PASS", "–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
                else:
                    self.log_result("Responsive Layout", "WARNING", "–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π")
            else:
                self.log_result("Responsive Layout", "FAIL", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
        except Exception as e:
            self.log_result("Responsive Layout", "ERROR", str(e))
            
    def test_navigation_menu(self):
        """–¢–µ—Å—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            response = self.session.get(f"{BASE_URL}/")
            if response.status_code == 200:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –º–µ–Ω—é
                menu_items = ["leads", "tours-search", "samo-testing", "unified-settings"]
                missing_items = []
                
                for item in menu_items:
                    if f'href="/{item}"' not in response.text and f"href='{item}'" not in response.text:
                        missing_items.append(item)
                        
                if not missing_items:
                    self.log_result("Navigation Menu", "PASS", "–í—Å–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                else:
                    self.log_result("Navigation Menu", "WARNING", f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Å—ã–ª–∫–∏: {missing_items}")
            else:
                self.log_result("Navigation Menu", "FAIL", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
        except Exception as e:
            self.log_result("Navigation Menu", "ERROR", str(e))
            
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Customer Journey –¥–ª—è Crystal Bay Travel")
        print("=" * 60)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        self.test_dashboard_accessibility()
        self.test_navigation_menu()
        self.test_responsive_layout()
        
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        self.test_leads_management_flow()
        self.test_tours_search_functionality()
        self.test_samo_testing_interface()
        self.test_settings_management()
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 60)
        
        passed = len([r for r in self.test_results if r['status'] == 'PASS'])
        failed = len([r for r in self.test_results if r['status'] == 'FAIL'])
        warnings = len([r for r in self.test_results if r['status'] == 'WARNING'])
        errors = len([r for r in self.test_results if r['status'] == 'ERROR'])
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
        print(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {errors}")
        print(f"üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(self.test_results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        # –î–µ—Ç–∞–ª–∏ –ø–æ –æ—à–∏–±–∫–∞–º
        if failed > 0 or errors > 0:
            print("\nüîç –î–ï–¢–ê–õ–ò –û–®–ò–ë–û–ö:")
            for result in self.test_results:
                if result['status'] in ['FAIL', 'ERROR']:
                    print(f"- {result['test']}: {result['details']}")
                    
        return {
            'total': len(self.test_results),
            'passed': passed,
            'failed': failed,
            'warnings': warnings,
            'errors': errors,
            'results': self.test_results
        }

if __name__ == "__main__":
    tester = CustomerJourneyTests()
    results = tester.run_all_tests()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open('test_results.json', 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")