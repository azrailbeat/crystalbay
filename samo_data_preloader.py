#!/usr/bin/env python3
"""
SAMO API Data Preloader
–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ SAMO API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import json
import logging
import time
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class SamoDataPreloader:
    """–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ SAMO API"""
    
    def __init__(self, samo_api):
        self.samo_api = samo_api
        self.preloaded_data = {}
        self.last_preload_time = None
        self.preload_duration = None
        
    def preload_all_reference_data(self) -> Dict[str, Any]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SearchTour_ALL –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ (–ê–ª–º–∞—Ç—ã ID: 1344 ‚Üí –í—å–µ—Ç–Ω–∞–º ID: 15)
        """
        start_time = time.time()
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö SAMO API...")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
        kazakhstan_params = {
            'TOWNFROMINC': '1344',  # –ê–ª–º–∞—Ç—ã
            'STATEINC': '15'        # –í—å–µ—Ç–Ω–∞–º
        }
        
        try:
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å SearchTour_ALL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìã –ó–∞–≥—Ä—É–∂–∞—é SearchTour_ALL –¥–ª—è –≤—Å–µ—Ö –æ—Ç–µ–ª–µ–π –∏ —Ç—É—Ä–æ–≤...")
            all_tours_result = self.samo_api._make_request('SearchTour_ALL', kazakhstan_params)
            
            # 2. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            reference_requests = {
                'currencies': ('SearchTour_CURRENCIES', kazakhstan_params),
                'states': ('SearchTour_STATES', kazakhstan_params),
                'towns_from': ('SearchTour_TOWNFROMS', kazakhstan_params),
                'stars': ('SearchTour_STARS', kazakhstan_params),
                'meals': ('SearchTour_MEALS', kazakhstan_params),
                'hotels': ('SearchTour_HOTELS', {**kazakhstan_params, 'STATEINC': '15'}),
                'programs': ('SearchTour_PROGRAMS', kazakhstan_params),
                'nights': ('NIGHTS', kazakhstan_params)
            }
            
            reference_data = {}
            success_count = 0
            
            for key, (command, params) in reference_requests.items():
                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–∞—é {command}...")
                result = self.samo_api._make_request(command, params)
                
                if result.get('success'):
                    reference_data[key] = result.get('data', {})
                    success_count += 1
                    logger.info(f"‚úÖ {command} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è {command} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {result.get('error')}")
                    reference_data[key] = {}
            
            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ SearchTour_ALL
            tours_data = {}
            hotels_list = []
            
            if all_tours_result.get('success'):
                tours_data = all_tours_result.get('data', {})
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–æ–≤
                if 'SearchTour_ALL' in tours_data and isinstance(tours_data['SearchTour_ALL'], list):
                    for tour in tours_data['SearchTour_ALL']:
                        if isinstance(tour, dict) and 'hotel_name' in tour:
                            hotel_info = {
                                'id': tour.get('hotel_id', ''),
                                'name': tour.get('hotel_name', ''),
                                'stars': tour.get('stars', 0),
                                'city': tour.get('city', ''),
                                'country': tour.get('country', '–í—å–µ—Ç–Ω–∞–º')
                            }
                            if hotel_info not in hotels_list:
                                hotels_list.append(hotel_info)
                
                logger.info(f"üè® –ù–∞–π–¥–µ–Ω–æ {len(hotels_list)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ—Ç–µ–ª–µ–π")
                success_count += 1
            else:
                logger.warning(f"‚ö†Ô∏è SearchTour_ALL –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: {all_tours_result.get('error')}")
            
            # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.preloaded_data = {
                'reference_data': reference_data,
                'tours_data': tours_data,
                'hotels_list': hotels_list,
                'kazakhstan_params': kazakhstan_params,
                'success_count': success_count,
                'total_requests': len(reference_requests) + 1,
                'load_time': time.time() - start_time,
                'loaded_at': time.strftime('%Y-%m-%d %H:%M:%S')
            }
            
            self.last_preload_time = time.time()
            self.preload_duration = self.preloaded_data['load_time']
            
            logger.info(f"üéâ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(reference_requests) + 1} –∑–∞–ø—Ä–æ—Å–æ–≤")
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: {self.preload_duration:.2f} —Å–µ–∫—É–Ω–¥")
            logger.info(f"üè® –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ—Ç–µ–ª–µ–π: {len(hotels_list)}")
            
            return self.preloaded_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            return {
                'reference_data': {},
                'tours_data': {},
                'hotels_list': [],
                'error': str(e),
                'load_time': time.time() - start_time,
                'success_count': 0
            }
    
    def get_preloaded_data(self, data_type: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É"""
        if not self.preloaded_data:
            logger.warning("–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return {}
        
        if data_type == 'all':
            return self.preloaded_data
        elif data_type in ['reference_data', 'tours_data', 'hotels_list']:
            return self.preloaded_data.get(data_type, {})
        else:
            return self.preloaded_data.get('reference_data', {}).get(data_type, {})
    
    def get_hotels_for_destination(self, destination_id: str = '15') -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–µ–ª–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        hotels = self.preloaded_data.get('hotels_list', [])
        if destination_id == '15':  # –í—å–µ—Ç–Ω–∞–º
            return hotels
        return []
    
    def get_currencies_list(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Ç"""
        currencies_data = self.preloaded_data.get('reference_data', {}).get('currencies', {})
        if 'SearchTour_CURRENCIES' in currencies_data:
            return currencies_data['SearchTour_CURRENCIES']
        
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞
        return [
            {'id': 'KZT', 'name': '‚Ç∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ'},
            {'id': 'USD', 'name': 'üíµ –î–æ–ª–ª–∞—Ä –°–®–ê'},
            {'id': 'RUB', 'name': '‚ÇΩ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å'}
        ]
    
    def get_departure_cities_list(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        towns_data = self.preloaded_data.get('reference_data', {}).get('towns_from', {})
        if 'SearchTour_TOWNFROMS' in towns_data:
            return towns_data['SearchTour_TOWNFROMS']
        
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ (ID –∏–∑ production SAMO API)
        return [
            {'id': 1344, 'name': '–ê–ª–º–∞—Ç—ã'},
            {'id': 1937, 'name': '–ê—Å—Ç–∞–Ω–∞'}
        ]
    
    def get_destinations_list(self) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        states_data = self.preloaded_data.get('reference_data', {}).get('states', {})
        if 'SearchTour_STATES' in states_data:
            return states_data['SearchTour_STATES']
        
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –í—å–µ—Ç–Ω–∞–º–∞
        return [
            {'id': '15', 'name': 'üáªüá≥ –í—å–µ—Ç–Ω–∞–º'}
        ]
    
    def is_data_fresh(self, max_age_minutes: int = 30) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–≤–µ–∂–∏–µ –ª–∏ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if not self.last_preload_time:
            return False
        
        age_minutes = (time.time() - self.last_preload_time) / 60
        return age_minutes <= max_age_minutes
    
    def get_preload_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        return {
            'is_loaded': bool(self.preloaded_data),
            'load_time': self.preload_duration,
            'loaded_at': self.preloaded_data.get('loaded_at'),
            'success_count': self.preloaded_data.get('success_count', 0),
            'total_requests': self.preloaded_data.get('total_requests', 0),
            'hotels_count': len(self.preloaded_data.get('hotels_list', [])),
            'is_fresh': self.is_data_fresh(),
            'age_minutes': (time.time() - self.last_preload_time) / 60 if self.last_preload_time else None
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫–∞
_preloader_instance = None

def initialize_preloader(samo_api):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    global _preloader_instance
    _preloader_instance = SamoDataPreloader(samo_api)
    return _preloader_instance

def get_preloader():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    return _preloader_instance

def preload_samo_data(samo_api):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    preloader = initialize_preloader(samo_api)
    return preloader.preload_all_reference_data()