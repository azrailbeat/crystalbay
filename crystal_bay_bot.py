import os
import logging
import requests
import openai
from dotenv import load_dotenv
from datetime import datetime, timedelta
# Import directly from telegram module
import telegram
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext

# Alias the necessary classes
InlineKeyboardButton = telegram.InlineKeyboardButton
InlineKeyboardMarkup = telegram.InlineKeyboardMarkup
Update = telegram.Update

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# API configuration
API_URL = "https://booking.crystalbay.com/export/default.php"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SAMO_TOKEN = os.getenv("SAMO_OAUTH_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# Initialize OpenAI
openai.api_key = OPENAI_API_KEY

# User sessions storage
user_sessions = {}

def start(update: Update, context: CallbackContext):
    """Start command handler - displays welcome message and initial options"""
    keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤", callback_data="search_tours")]]
    # Use send_message for version 13
    context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crystal Bay Travel! üèñÔ∏è", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def callback_handler(update: Update, context: CallbackContext):
    """Handle callback queries from inline keyboards"""
    query = update.callback_query
    query.answer()  # Answer the callback query to stop the loading animation
    
    data = query.data
    user_id = query.from_user.id
    
    # Initialize user session if not exists
    if user_id not in user_sessions:
        user_sessions[user_id] = {}
    
    # Handle different callback actions
    if data == "search_tours":
        select_departure_city(query)
    elif data.startswith("city_"):
        city_id = data.split("_")[1]
        user_sessions[user_id]["departure_city"] = city_id
        select_country(query, city_id)
    elif data.startswith("country_"):
        country_id = data.split("_")[1]
        user_sessions[user_id]["country"] = country_id
        select_dates(query, user_sessions[user_id])
    elif data.startswith("date_"):
        date_selected = data.split("_")[1]
        user_sessions[user_id]["checkin"] = date_selected
        search_tours(query, user_sessions[user_id])
    elif data.startswith("book_"):
        tour_id = data.split("_")[1]
        user_sessions[user_id]["tour_id"] = tour_id
        initiate_booking(query, tour_id)

def select_departure_city(query):
    """Show available departure cities"""
    try:
        response = requests.get(
            f"{API_URL}?samo_action=api&oauth_token={SAMO_TOKEN}&type=json&action=SearchTour_TOWNFROMS")
        response.raise_for_status()
        
        cities = response.json().get("SearchTour_TOWNFROMS", [])
        
        if not cities:
            query.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Create a keyboard with city buttons (2 per row)
        keyboard = []
        row = []
        
        for i, city in enumerate(cities):
            row.append(InlineKeyboardButton(city["nameAlt"], callback_data=f"city_{city['id']}"))
            
            if (i + 1) % 2 == 0 or i == len(cities) - 1:
                keyboard.append(row)
                row = []
        
        query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
    
    except requests.RequestException as e:
        logger.error(f"API error: {e}")
        query.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        query.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def select_country(query, city_id):
    """Show available countries based on selected departure city"""
    try:
        response = requests.post(
            f"{API_URL}?samo_action=api&oauth_token={SAMO_TOKEN}&type=json&action=SearchTour_STATES",
            headers={'Content-Type': 'application/xml'},
            data=f'<data><TOWNFROMINC>{city_id}</TOWNFROMINC></data>'
        )
        response.raise_for_status()
        
        countries = response.json().get("SearchTour_STATES", [])
        
        if not countries:
            query.message.reply_text("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        # Create a keyboard with country buttons (2 per row)
        keyboard = []
        row = []
        
        for i, country in enumerate(countries):
            row.append(InlineKeyboardButton(country["nameAlt"], callback_data=f"country_{country['id']}"))
            
            if (i + 1) % 2 == 0 or i == len(countries) - 1:
                keyboard.append(row)
                row = []
        
        query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))
    
    except requests.RequestException as e:
        logger.error(f"API error: {e}")
        query.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        query.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def select_dates(query, session):
    """Show available travel dates"""
    # Generate dates for the next 30 days
    dates = [(datetime.now() + timedelta(days=i)) for i in range(1, 31)]
    
    # Create a keyboard with dates (3 per row)
    keyboard = []
    row = []
    
    for i, date in enumerate(dates[:21]):  # Limit to 21 days for cleaner interface
        formatted_date = date.strftime("%d.%m")
        raw_date = date.strftime("%Y%m%d")
        row.append(InlineKeyboardButton(formatted_date, callback_data=f"date_{raw_date}"))
        
        if (i + 1) % 3 == 0 or i == len(dates[:21]) - 1:
            keyboard.append(row)
            row = []
    
    query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:\n(–î–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú)",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def search_tours(query, session):
    """Search for tours based on user selections"""
    query.message.reply_text("üîé –ò—â–µ–º —Ç—É—Ä—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        params = {
            "samo_action": "api",
            "oauth_token": SAMO_TOKEN,
            "type": "json",
            "action": "SearchTour_TOURS",
            "townfrom": session["departure_city"],
            "stateinc": session["country"],
            "checkin": session["checkin"],
            "checkout": session["checkin"],  # Same as checkin for API requirements
            "nights_min": 3,
            "nights_max": 14,
            "adults": 2,
            "currency": "RUB"
        }
        
        response = requests.get(API_URL, params=params)
        response.raise_for_status()
        
        tours = response.json().get("SearchTour_TOURS", [])
        
        if not tours:
            query.message.reply_text(
                "üòû –¢—É—Ä—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."
            )
            
            # Provide option to restart search
            keyboard = [[InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tours")]]
            query.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # Store found tours in user session
        user_id = query.from_user.id
        user_sessions[user_id]["tours"] = tours
        
        query.message.reply_text(f"üèùÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(tours)} —Ç—É—Ä–æ–≤:")
        
        # Display tours (limit to 5 to avoid message length limits)
        for tour in tours[:5]:
            tour_info = format_tour_details(tour)
            
            keyboard = [[InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{tour['id']}")]]
            query.message.reply_text(tour_info, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # Add option for new search
        keyboard = [[InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tours")]]
        query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    except requests.RequestException as e:
        logger.error(f"API error: {e}")
        query.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        query.message.reply_text("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def initiate_booking(query, tour_id):
    """Begin the booking process for a selected tour"""
    user_id = query.from_user.id
    
    # Find the selected tour details
    selected_tour = None
    for tour in user_sessions[user_id].get("tours", []):
        if tour["id"] == tour_id:
            selected_tour = tour
            break
    
    if not selected_tour:
        query.message.reply_text("üòî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—É—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # Format tour details
    tour_info = format_tour_details(selected_tour)
    user_sessions[user_id]["selected_tour_info"] = tour_info
    
    # Ask for user's name
    query.message.reply_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n{tour_info}\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        parse_mode='Markdown'
    )
    
    # Set next expected input
    user_sessions[user_id]["booking_stage"] = "name"

def process_booking_input(update: Update, context: CallbackContext):
    """Process booking information from user"""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    if user_id not in user_sessions:
        update.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    booking_stage = user_sessions[user_id].get("booking_stage")
    
    if booking_stage == "name":
        # Save name and request phone number
        user_sessions[user_id]["name"] = message_text
        user_sessions[user_id]["booking_stage"] = "phone"
        
        update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    
    elif booking_stage == "phone":
        # Save phone and show confirmation
        user_sessions[user_id]["phone"] = message_text
        
        # Get saved data
        tour_info = user_sessions[user_id]["selected_tour_info"]
        name = user_sessions[user_id]["name"]
        phone = user_sessions[user_id]["phone"]
        
        # Show confirmation buttons
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")]
        ]
        
        update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
            f"{tour_info}\n\n"
            f"*–ò–º—è*: {name}\n"
            f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {phone}\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
        user_sessions[user_id]["booking_stage"] = "confirmation"
    
    else:
        # Handle unexpected messages
        update.message.reply_text(
            "–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )

def finalize_booking(query):
    """Complete the booking process"""
    user_id = query.from_user.id
    
    if user_id not in user_sessions:
        query.message.reply_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    # In a real implementation, here we would send the booking to the API
    # or save it to a database for the travel agency staff
    
    query.message.reply_text(
        "‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ–ø–ª–∞—Ç—ã.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Crystal Bay Travel! üèùÔ∏è"
    )
    
    # Clean up session data
    del user_sessions[user_id]
    
    # Provide option to start a new search
    keyboard = [[InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tours")]]
    query.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –µ—â–µ –æ–¥–∏–Ω —Ç—É—Ä?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

def format_tour_details(tour):
    """Format tour details for display in Telegram message"""
    # Default values for missing fields
    hotel_name = tour.get("nameAlt", "–û—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω")
    tour_type = tour.get("typeAlt", "–¢–∏–ø –Ω–µ —É–∫–∞–∑–∞–Ω")
    partner = tour.get("partnerAlt", "–ü–∞—Ä—Ç–Ω–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω")
    nights = tour.get("nights", "?")
    meal_type = tour.get("mealAlt", "–ü–∏—Ç–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    room_type = tour.get("roomAlt", "–¢–∏–ø –Ω–æ–º–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
    
    # Price handling - use price if available, otherwise use priceInCurrency
    price = None
    if "price" in tour and tour["price"]:
        price = f"{tour['price']} {tour.get('currency', 'RUB')}"
    elif "priceInCurrency" in tour and tour["priceInCurrency"]:
        price = f"{tour['priceInCurrency']} {tour.get('currencyInCurrency', 'RUB')}"
    else:
        price = "–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É"
    
    # Format dates
    checkin_date = tour.get("checkin", "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
    if checkin_date and len(checkin_date) == 8:  # Format: YYYYMMDD
        checkin_date = f"{checkin_date[6:8]}.{checkin_date[4:6]}.{checkin_date[0:4]}"
    
    # Compose message
    tour_info = (
        f"*{hotel_name}*\n"
        f"üóì *–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:* {checkin_date}\n"
        f"üåô *–ù–æ—á–µ–π:* {nights}\n"
        f"üçΩ *–ü–∏—Ç–∞–Ω–∏–µ:* {meal_type}\n"
        f"üõè *–†–∞–∑–º–µ—â–µ–Ω–∏–µ:* {room_type}\n"
        f"üîÑ *–¢–∏–ø —Ç—É—Ä–∞:* {tour_type}\n"
        f"ü§ù *–¢—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä:* {partner}\n"
        f"üí∞ *–¶–µ–Ω–∞:* {price}"
    )
    
    return tour_info

def help_command(update: Update, context: CallbackContext):
    """Send help information"""
    help_text = (
        "üå¥ *Crystal Bay Travel Bot* üå¥\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏\n"
        "4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã\n"
        "5. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç—É—Ä\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ —Ç—É—Ä–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö Crystal Bay Travel, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )
    
    update.message.reply_text(help_text, parse_mode='Markdown')

def cancel_command(update: Update, context: CallbackContext):
    """Cancel current operation and clean up user session"""
    user_id = update.effective_user.id
    
    if user_id in user_sessions:
        del user_sessions[user_id]
    
    update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    )

def handle_text_message(update: Update, context: CallbackContext):
    """Handle text messages that could be part of booking process or general queries"""
    user_id = update.effective_user.id
    
    # Check if user is in booking process
    if user_id in user_sessions and "booking_stage" in user_sessions[user_id]:
        # Process as part of booking
        process_booking_input(update, context)
    else:
        # Use OpenAI to handle general queries
        prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö: {update.message.text}\n–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫–∞–∫ —Ç—É—Ä–∞–≥–µ–Ω—Ç Crystal Bay Travel."
        
        try:
            # the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
            # do not change this unless explicitly requested by the user
            client = openai.OpenAI(api_key=OPENAI_API_KEY)
            response = client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ Crystal Bay Travel. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ-—Ä—É—Å—Å–∫–∏, –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –º–∞–Ω–µ—Ä–µ."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=300
            )
            
            ai_response = response.choices[0].message.content
            
            update.message.reply_text(ai_response)
            
            # Suggest search option
            keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤", callback_data="search_tours")]]
            update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—É—Ä?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            
        except Exception as e:
            logger.error(f"OpenAI error: {e}")
            update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–µ–π—á–∞—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º —Ç—É—Ä–æ–≤."
            )
            
            # Suggest search option
            keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤", callback_data="search_tours")]]
            update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ç—É—Ä?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

def main():
    """Start the bot"""
    # Check if token is available
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN environment variable not set!")
        return
    
    # Create updater
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    
    # Add handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CommandHandler("cancel", cancel_command))
    dispatcher.add_handler(CallbackQueryHandler(callback_handler))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text_message))
    
    # Start the Bot
    logger.info("Bot is running...")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()