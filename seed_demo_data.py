"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
Crystal Bay Travel - Demo Data Generator
"""

import os
import sys
from datetime import datetime, timedelta
import random

os.environ.setdefault('DATABASE_URL', os.environ.get('DATABASE_URL'))
os.environ.setdefault('SESSION_SECRET', os.environ.get('SESSION_SECRET', 'demo-secret-key-12345'))

# Import app and models - –ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω!
from app import app, db
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ Base.metadata
from models import Base, Client, Order, OrderLog, Message, SamoCache, ApiLog, Settings

DEMO_CLIENTS = [
    {"name": "–ê–π–≥–µ—Ä–∏–º –ù—É—Ä–ª–∞–Ω–æ–≤–∞", "phone": "+77051234567", "email": "aigerim.n@mail.kz"},
    {"name": "–ï—Ä–∂–∞–Ω –ö–∞—Å—ã–º–æ–≤", "phone": "+77052345678", "email": "yerzhan.k@gmail.com"},
    {"name": "–î–∏–Ω–∞ –°–∞–≥–∞–¥–∏–µ–≤–∞", "phone": "+77053456789", "email": "dina.s@inbox.kz"},
    {"name": "–ê—Å–µ–ª—å –¢–æ–∫—Ç–∞—Ä–æ–≤–∞", "phone": "+77054567890", "email": "asel.t@yandex.kz"},
    {"name": "–ú—É—Ä–∞—Ç –ê–±–¥—É–ª–ª–∞–µ–≤", "phone": "+77055678901", "email": "murat.a@mail.ru"},
    {"name": "–ñ–∞–Ω–Ω–∞ –ò—Å–∫–∞–∫–æ–≤–∞", "phone": "+77056789012", "email": "zhanna.i@gmail.com"},
    {"name": "–î–∞—Ä—Ö–∞–Ω –°–º–∞–≥—É–ª–æ–≤", "phone": "+77057890123", "email": "darkhan.s@inbox.kz"},
    {"name": "–°–∞—É–ª–µ –ñ—É–º–∞–±–∞–µ–≤–∞", "phone": "+77058901234", "email": "saule.zh@mail.kz"},
    {"name": "–ù—É—Ä–ª–∞–Ω –°–∞–¥—ã–∫–æ–≤", "phone": "+77059012345", "email": "nurlan.s@gmail.com"},
    {"name": "–ì—É–ª—å–Ω–∞—Ä–∞ –ï—Å–µ–Ω–æ–≤–∞", "phone": "+77050123456", "email": "gulnara.e@yandex.kz"},
]

DEMO_DESTINATIONS = [
    "–ù—è—á–∞–Ω–≥, –í—å–µ—Ç–Ω–∞–º",
    "–§–∞–Ω—Ç—å–µ—Ç, –í—å–µ—Ç–Ω–∞–º", 
    "–§—É–∫—É–æ–∫, –í—å–µ—Ç–Ω–∞–º",
    "–•–∞–Ω–æ–π, –í—å–µ—Ç–Ω–∞–º",
    "–•–æ—à–∏–º–∏–Ω, –í—å–µ—Ç–Ω–∞–º",
    "–î–∞–ª–∞—Ç, –í—å–µ—Ç–Ω–∞–º",
]

DEMO_HOTELS = [
    {"name": "Vinpearl Resort & Spa", "stars": 5},
    {"name": "InterContinental Nha Trang", "stars": 5},
    {"name": "Sheraton Nha Trang", "stars": 5},
    {"name": "Novotel Phu Quoc Resort", "stars": 4},
    {"name": "Melia Ho Tram Beach Resort", "stars": 5},
    {"name": "Muong Thanh Luxury Nha Trang", "stars": 4},
    {"name": "Diamond Bay Resort & Spa", "stars": 4},
    {"name": "Sunrise Nha Trang Beach Hotel", "stars": 4},
    {"name": "Premier Village Phu Quoc", "stars": 5},
    {"name": "Fusion Resort Cam Ranh", "stars": 5},
]

MEAL_TYPES = ["BB", "HB", "FB", "AI", "UAI"]
STATUSES = ["new", "processing", "confirmed", "paid", "cancelled"]

DEMO_MESSAGES = [
    {
        "platform": "telegram",
        "text": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç—É—Ä –≤–æ –í—å–µ—Ç–Ω–∞–º –Ω–∞ –¥–≤–æ–∏—Ö, 10 –¥–Ω–µ–π",
        "from_username": "aigerim_n"
    },
    {
        "platform": "whatsapp",
        "text": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ö–∞–∫–∏–µ –æ—Ç–µ–ª–∏ –µ—Å—Ç—å –≤ –ù—è—á–∞–Ω–≥–µ —Å –∞–∫–≤–∞–ø–∞—Ä–∫–æ–º?",
        "from_username": "–ï—Ä–∂–∞–Ω"
    },
    {
        "platform": "telegram",
        "text": "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 2 –≤–∑—Ä–æ—Å–ª—ã—Ö + 1 —Ä–µ–±–µ–Ω–æ–∫ –≤ –æ–∫—Ç—è–±—Ä–µ",
        "from_username": "dina_s"
    },
    {
        "platform": "whatsapp",
        "text": "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –≤–∏–∑–æ–π –≤–æ –í—å–µ—Ç–Ω–∞–º",
        "from_username": "–ê—Å–µ–ª—å"
    },
    {
        "platform": "telegram",
        "text": "–•–æ—á—É –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å Vinpearl Resort –Ω–∞ 7 –Ω–æ—á–µ–π",
        "from_username": "murat_a"
    },
    {
        "platform": "whatsapp",
        "text": "–ï—Å—Ç—å –ª–∏ –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é?",
        "from_username": "–ñ–∞–Ω–Ω–∞"
    },
    {
        "platform": "telegram", 
        "text": "–ú–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å —Ç—É—Ä –µ—â–µ –Ω–∞ 3 –¥–Ω—è?",
        "from_username": "darkhan_s"
    },
    {
        "platform": "telegram",
        "text": "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–±–æ—Ä–∫—É! –ë–µ—Ä—É –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç",
        "from_username": "saule_zh"
    },
    {
        "platform": "whatsapp",
        "text": "–ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É?",
        "from_username": "–ù—É—Ä–ª–∞–Ω"
    },
    {
        "platform": "telegram",
        "text": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≥—Ä–∞–º–º—É —ç–∫—Å–∫—É—Ä—Å–∏–π",
        "from_username": "gulnara_e"
    },
]

def clear_demo_data():
    """–û—á–∏—Å—Ç–∫–∞ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
    print("üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    db.create_all()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ - —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
    try:
        db.session.query(Message).delete()
    except:
        pass
    
    try:
        db.session.query(OrderLog).delete()
    except:
        pass
        
    try:
        db.session.query(Order).delete()
    except:
        pass
        
    try:
        db.session.query(Client).delete()
    except:
        pass
        
    db.session.commit()
    
    print("‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")

def create_demo_clients():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–ª–∏–µ–Ω—Ç–æ–≤"""
    print("üë• –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–ª–∏–µ–Ω—Ç–æ–≤...")
    
    clients = []
    for client_data in DEMO_CLIENTS:
        client = Client(
            name=client_data["name"],
            phone=client_data["phone"],
            email=client_data["email"],
            created_at=datetime.utcnow() - timedelta(days=random.randint(1, 90))
        )
        db.session.add(client)
        clients.append(client)
    
    db.session.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    return clients

def create_demo_orders(clients):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫"""
    print("üìã –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∑–∞—è–≤–æ–∫...")
    
    orders = []
    for i, client in enumerate(clients):
        # –ö–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É —Å–æ–∑–¥–∞–µ–º 1-2 –∑–∞—è–≤–∫–∏
        num_orders = random.randint(1, 2)
        
        for j in range(num_orders):
            order_num = f"CB{datetime.utcnow().year}{(i*10 + j + 1):04d}"
            
            destination = random.choice(DEMO_DESTINATIONS)
            hotel = random.choice(DEMO_HOTELS)
            nights = random.choice([7, 10, 12, 14])
            check_in_days = random.randint(-30, 60)
            check_in = datetime.utcnow() + timedelta(days=check_in_days)
            check_out = check_in + timedelta(days=nights)
            
            adults = random.randint(1, 4)
            children = random.randint(0, 2)
            meal_type = random.choice(MEAL_TYPES)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            base_price = 250000 * nights * adults
            if children > 0:
                base_price += 150000 * nights * children
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é –≤ —Ü–µ–Ω–µ
            total_amount = base_price * random.uniform(0.9, 1.3)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            if check_in_days < -5:
                status = random.choice(["paid", "confirmed"])
            elif check_in_days < 0:
                status = "confirmed"
            elif check_in_days < 30:
                status = random.choice(["processing", "confirmed", "new"])
            else:
                status = random.choice(["new", "processing"])
            
            if random.random() < 0.1:
                status = "cancelled"
            
            order = Order(
                number=order_num,
                client_id=client.id,
                client_name=client.name,
                client_phone=client.phone,
                client_email=client.email,
                destination=destination,
                hotel_name=hotel["name"],
                hotel_stars=hotel["stars"],
                check_in=check_in,
                check_out=check_out,
                nights=nights,
                adults=adults,
                children=children,
                meal_type=meal_type,
                total_amount=round(total_amount, 2),
                currency='KZT',
                status=status,
                source='demo',
                created_at=datetime.utcnow() - timedelta(days=random.randint(1, 60))
            )
            
            db.session.add(order)
            orders.append(order)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ —Å–æ–∑–¥–∞–Ω–∏—è
            log = OrderLog(
                order=order,
                action='created',
                description=f'–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {client.name}',
                created_at=order.created_at
            )
            db.session.add(log)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if status in ['confirmed', 'paid']:
                log = OrderLog(
                    order=order,
                    action='status_changed',
                    old_value='new',
                    new_value='processing',
                    description='–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
                    created_at=order.created_at + timedelta(hours=2)
                )
                db.session.add(log)
                
                log = OrderLog(
                    order=order,
                    action='status_changed',
                    old_value='processing',
                    new_value='confirmed',
                    description='–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
                    created_at=order.created_at + timedelta(days=1)
                )
                db.session.add(log)
            
            if status == 'paid':
                log = OrderLog(
                    order=order,
                    action='status_changed',
                    old_value='confirmed',
                    new_value='paid',
                    description='–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞',
                    created_at=order.created_at + timedelta(days=2)
                )
                db.session.add(log)
    
    db.session.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(orders)} –∑–∞—è–≤–æ–∫")
    return orders

def create_demo_messages(clients):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    messages = []
    for i, msg_data in enumerate(DEMO_MESSAGES):
        if i < len(clients):
            client = clients[i]
            
            # –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            msg_id = f"msg_{msg_data['platform']}_{i+1000}"
            chat_id = f"chat_{msg_data['platform']}_{client.id}"
            
            message = Message(
                platform=msg_data["platform"],
                chat_id=chat_id,
                message_id=msg_id,
                from_user_id=str(client.id),
                from_username=msg_data["from_username"],
                from_phone=client.phone if msg_data["platform"] == "whatsapp" else None,
                text=msg_data["text"],
                message_type="text",
                direction="incoming",
                is_read=random.choice([True, False]),
                replied=random.choice([True, False]),
                client_id=client.id,
                created_at=datetime.utcnow() - timedelta(hours=random.randint(1, 72)),
                received_at=datetime.utcnow() - timedelta(hours=random.randint(1, 72))
            )
            
            db.session.add(message)
            messages.append(message)
            
            # –ò—Å—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç (–¥–ª—è –ø–æ–ª–æ–≤–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π)
            if random.random() < 0.5:
                reply_texts = [
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.",
                    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É —Å –ø–æ–¥–±–æ—Ä–æ–º —Ç—É—Ä–∞.",
                    "–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∞–º –ø–æ–¥–±–æ—Ä–∫—É –æ—Ç–µ–ª–µ–π.",
                    "–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤–∞—à–∏ –¥–∞—Ç—ã.",
                    "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –í—Å–µ –¥–µ—Ç–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º –Ω–∞ –ø–æ—á—Ç—É.",
                ]
                
                reply_msg = Message(
                    platform=msg_data["platform"],
                    chat_id=chat_id,
                    message_id=f"{msg_id}_reply",
                    from_user_id="agent_1",
                    from_username="Crystal Bay Travel",
                    text=random.choice(reply_texts),
                    message_type="text",
                    direction="outgoing",
                    is_read=True,
                    replied=False,
                    created_at=message.created_at + timedelta(minutes=random.randint(5, 120)),
                    received_at=message.received_at + timedelta(minutes=random.randint(5, 120))
                )
                
                db.session.add(reply_msg)
                messages.append(reply_msg)
    
    db.session.commit()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    return messages

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("üé≠ –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–• –î–ê–ù–ù–´–•")
    print("Crystal Bay Travel - Demo Data Generator")
    print("="*60 + "\n")
    
    try:
        with app.app_context():
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            clear_demo_data()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
            clients = create_demo_clients()
            orders = create_demo_orders(clients)
            messages = create_demo_messages(clients)
            
            print("\n" + "="*60)
            print("üéâ –î–ï–ú–û-–î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–´!")
            print("="*60)
            print(f"üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
            print(f"üìã –ó–∞—è–≤–æ–∫: {len(orders)}")
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            print("="*60 + "\n")
            
            print("‚úÖ –î–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")
            print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main()
