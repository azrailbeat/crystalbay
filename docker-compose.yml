version: '3.8'

services:
  # ===================
  # Main Web Application
  # ===================
  web:
    build: .
    container_name: crystal_bay_web
    ports:
      - "5000:5000"
    environment:
      # Flask Configuration
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - PYTHONUNBUFFERED=1
      
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://crystal_bay:crystal_bay_password@db:5432/crystal_bay_db}
      
      # Required API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - SESSION_SECRET=${SESSION_SECRET:-your-secret-key-change-in-production}
      
      # Optional API Keys
      - WAZZUP_API_KEY=${WAZZUP_API_KEY:-}
      - SAMO_OAUTH_TOKEN=${SAMO_OAUTH_TOKEN:-}
      - SUPABASE_URL=${SUPABASE_URL:-}
      - SUPABASE_KEY=${SUPABASE_KEY:-}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-}
      
      # Application Settings
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
    
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - static_uploads:/app/static/uploads
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - crystal_bay_network

  # ===================
  # PostgreSQL Database
  # ===================
  db:
    image: postgres:15-alpine
    container_name: crystal_bay_db
    environment:
      - POSTGRES_DB=crystal_bay_db
      - POSTGRES_USER=crystal_bay
      - POSTGRES_PASSWORD=${DB_PASSWORD:-crystal_bay_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      # Postgres configuration for performance
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crystal_bay -d crystal_bay_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    
    networks:
      - crystal_bay_network

  # ===================
  # Redis Cache
  # ===================
  redis:
    image: redis:7-alpine
    container_name: crystal_bay_redis
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 60 1000
    
    volumes:
      - redis_data:/data
    
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    
    networks:
      - crystal_bay_network

  # ===================
  # Nginx Reverse Proxy (Optional)
  # ===================
  nginx:
    image: nginx:alpine
    container_name: crystal_bay_nginx
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_uploads:/var/www/uploads:ro
    
    depends_on:
      web:
        condition: service_healthy
    
    restart: unless-stopped
    
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    networks:
      - crystal_bay_network
    
    # Uncomment if you don't need nginx (direct access to web service)
    # profiles:
    #   - nginx

# ===================
# Persistent Volumes
# ===================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  static_uploads:
    driver: local

# ===================
# Networks
# ===================
networks:
  crystal_bay_network:
    driver: bridge
    name: crystal_bay_network