
import os
import logging
import requests
import openai
from dotenv import load_dotenv
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

API_URL = "https://booking.crystalbay.com/export/default.php"
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SAMO_TOKEN = os.getenv("SAMO_OAUTH_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai.api_key = OPENAI_API_KEY
user_sessions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤", callback_data="search_tours")]]
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crystal Bay Travel! üèñÔ∏è", reply_markup=InlineKeyboardMarkup(keyboard))

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data == "search_tours":
        await select_departure_city(query)
    elif data.startswith("city_"):
        city_id = data.split("_")[1]
        user_sessions[user_id] = {"departure_city": city_id}
        await select_country(query, city_id)
    elif data.startswith("country_"):
        country_id = data.split("_")[1]
        user_sessions[user_id]["country"] = country_id
        await select_dates(query, user_sessions[user_id])
    elif data.startswith("date_"):
        date_selected = data.split("_")[1]
        user_sessions[user_id]["checkin"] = date_selected
        await search_tours(query, user_sessions[user_id])
    elif data.startswith("book_"):
        tour_id = data.split("_")[1]
        await query.message.reply_text(f"‚úÖ –¢—É—Ä —Å ID {tour_id} –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")

async def select_departure_city(query):
    response = requests.get(
        f"{API_URL}?samo_action=api&oauth_token={SAMO_TOKEN}&type=json&action=SearchTour_TOWNFROMS")
    cities = response.json().get("SearchTour_TOWNFROMS", [])

    keyboard = [[InlineKeyboardButton(city["nameAlt"], callback_data=f"city_{city['id']}")] for city in cities]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_country(query, city_id):
    response = requests.post(
        f"{API_URL}?samo_action=api&oauth_token={SAMO_TOKEN}&type=json&action=SearchTour_STATES",
        headers={'Content-Type': 'application/xml'},
        data=f'<data><TOWNFROMINC>{city_id}</TOWNFROMINC></data>'
    )
    countries = response.json().get("SearchTour_STATES", [])

    keyboard = [[InlineKeyboardButton(country["nameAlt"], callback_data=f"country_{country['id']}")] for country in countries]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_dates(query, session):
    dates = [(datetime.now() + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(1, 31)]

    keyboard = [
        [InlineKeyboardButton(date, callback_data=f"date_{date.replace('-', '')}")]
        for date in dates[:7]
    ]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def search_tours(query, session):
    params = {
        "samo_action": "api",
        "oauth_token": SAMO_TOKEN,
        "type": "json",
        "action": "SearchTour_TOURS",
        "townfrom": session["departure_city"],
        "stateinc": session["country"],
        "checkin": session["checkin"],
        "checkout": session["checkin"],
        "nights_min": 3,
        "nights_max": 7,
        "adults": 2
    }
    response = requests.get(API_URL, params=params)
    tours = response.json().get("SearchTour_TOURS", [])

    if not tours:
        await query.message.reply_text("üòû –¢—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for tour in tours:
        tour_info = (
            f"üè® {tour.get('nameAlt')}\n"
            f"üó∫ –¢–∏–ø: {tour.get('typeAlt')}\n"
            f"ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä: {tour.get('partnerAlt')}\n"
            f"üí∞ –¶–µ–Ω–∞: —É—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
        )
        keyboard = [[InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{tour['id']}")]]
        await query.message.reply_text(tour_info, reply_markup=InlineKeyboardMarkup(keyboard))

app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(callback_handler))

logging.info("Bot is running...")
app.run_polling()
