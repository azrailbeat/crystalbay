import os
import logging
import asyncio
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telegram import (
    InlineKeyboardButton, 
    InlineKeyboardMarkup, 
    Update, 
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters, 
    ContextTypes,
    ConversationHandler
)

from helpers import fetch_cities, fetch_countries, fetch_tours, format_tour_details
from nlp_processor import process_message

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Environment variables
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SAMO_TOKEN = os.getenv("SAMO_OAUTH_TOKEN")

# Constants for ConversationHandler
SELECTING_ACTION, SELECTING_CITY, SELECTING_COUNTRY, SELECTING_DATES, BOOKING_TOUR, COLLECT_NAME, COLLECT_PHONE, CONFIRM_BOOKING = range(8)

# User session storage
user_sessions = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Start the conversation and ask user what they want to do."""
    user_id = update.effective_user.id
    user_sessions[user_id] = {}
    
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤", callback_data="search_tours")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crystal Bay Travel! üèñÔ∏è\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –æ—Ç–ø—É—Å–∫–∞. "
        "–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_ACTION

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = (
        "üå¥ *Crystal Bay Travel Bot* üå¥\n\n"
        "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/search - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Ç—É—Ä–æ–≤\n"
        "/cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏\n"
        "4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã\n"
        "5. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç—É—Ä\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ —Ç—É—Ä–∞—Ö –∏–ª–∏ —É—Å–ª—É–≥–∞—Ö Crystal Bay Travel, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"
    )
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Cancel and end the conversation."""
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    
    await update.message.reply_text(
        '–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω. –ö–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /start.',
        reply_markup=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle the inline keyboard button press."""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "search_tours":
        return await select_departure_city(update, context)
    elif data == "help":
        await query.message.reply_text(
            "üå¥ *Crystal Bay Travel Bot* üå¥\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π —Ç—É—Ä.\n\n"
            "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
            "1. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n"
            "3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏\n"
            "4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—É—Ä—ã\n"
            "5. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ç—É—Ä\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start.",
            parse_mode='Markdown'
        )
        return SELECTING_ACTION
    elif data.startswith("city_"):
        city_id = data.split("_")[1]
        if user_id not in user_sessions:
            user_sessions[user_id] = {}
        user_sessions[user_id]["departure_city"] = city_id
        return await select_country(update, context)
    elif data.startswith("country_"):
        country_id = data.split("_")[1]
        user_sessions[user_id]["country"] = country_id
        return await select_dates(update, context)
    elif data.startswith("date_"):
        date_selected = data.split("_")[1]
        user_sessions[user_id]["checkin"] = date_selected
        return await search_tours(update, context)
    elif data.startswith("book_"):
        tour_id = data.split("_")[1]
        user_sessions[user_id]["tour_id"] = tour_id
        return await initiate_booking(update, context)
    elif data == "confirm_booking":
        return await finalize_booking(update, context)
    elif data == "cancel_booking":
        await query.message.reply_text("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ /start.")
        return ConversationHandler.END
    
    # Default fallback
    await query.message.reply_text("–ù–µ–ø–æ–Ω—è—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start.")
    return SELECTING_ACTION

async def select_departure_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show available departure cities."""
    query = update.callback_query if update.callback_query else None
    message = query.message if query else update.message
    
    try:
        cities = await fetch_cities(SAMO_TOKEN)
        
        if not cities:
            await message.reply_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤—ã–ª–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return SELECTING_ACTION
        
        # Create a keyboard with cities
        keyboard = []
        row = []
        for i, city in enumerate(cities):
            row.append(InlineKeyboardButton(city["nameAlt"], callback_data=f"city_{city['id']}"))
            
            # 2 buttons per row
            if (i + 1) % 2 == 0 or i == len(cities) - 1:
                keyboard.append(row)
                row = []
        
        await message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return SELECTING_CITY
        
    except Exception as e:
        logger.error(f"Error in select_departure_city: {e}")
        await message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return SELECTING_ACTION

async def select_country(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show available countries based on selected departure city."""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        city_id = user_sessions[user_id]["departure_city"]
        countries = await fetch_countries(SAMO_TOKEN, city_id)
        
        if not countries:
            await query.message.reply_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return SELECTING_CITY
        
        # Create a keyboard with countries
        keyboard = []
        row = []
        for i, country in enumerate(countries):
            row.append(InlineKeyboardButton(country["nameAlt"], callback_data=f"country_{country['id']}"))
            
            # 2 buttons per row
            if (i + 1) % 2 == 0 or i == len(countries) - 1:
                keyboard.append(row)
                row = []
        
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return SELECTING_COUNTRY
        
    except Exception as e:
        logger.error(f"Error in select_country: {e}")
        await query.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return SELECTING_CITY

async def select_dates(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Show available travel dates."""
    query = update.callback_query
    
    # Generate dates for the next 30 days
    dates = [(datetime.now() + timedelta(days=i)) for i in range(1, 31)]
    
    # Create a keyboard with dates (3 dates per row)
    keyboard = []
    row = []
    for i, date in enumerate(dates[:21]):  # Limit to 21 days to keep interface cleaner
        formatted_date = date.strftime("%d.%m")
        raw_date = date.strftime("%Y%m%d")
        row.append(InlineKeyboardButton(formatted_date, callback_data=f"date_{raw_date}"))
        
        # 3 buttons per row
        if (i + 1) % 3 == 0 or i == len(dates) - 1:
            keyboard.append(row)
            row = []
    
    await query.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:\n(–î–∞—Ç—ã –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú)",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_DATES

async def search_tours(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Search for tours based on user selections."""
    query = update.callback_query
    user_id = query.from_user.id
    session = user_sessions[user_id]
    
    await query.message.reply_text("üîé –ò—â–µ–º —Ç—É—Ä—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
    
    try:
        tours = await fetch_tours(
            SAMO_TOKEN,
            session["departure_city"],
            session["country"],
            session["checkin"]
        )
        
        if not tours:
            await query.message.reply_text(
                "üòû –¢—É—Ä—ã –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ."
            )
            
            # Provide option to start over
            keyboard = [[InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tours")]]
            await query.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return SELECTING_ACTION
        
        user_sessions[user_id]["tours"] = tours
        
        # Display found tours (limit to 5 to avoid message limit)
        await query.message.reply_text(f"üèùÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(tours)} —Ç—É—Ä–æ–≤:")
        
        for tour in tours[:5]:  # Limit to 5 tours to avoid spam
            tour_info = format_tour_details(tour)
            
            keyboard = [[InlineKeyboardButton("üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{tour['id']}")]]
            await query.message.reply_text(
                tour_info,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        
        # Add option for new search
        keyboard = [[InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tours")]]
        await query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        return BOOKING_TOUR
        
    except Exception as e:
        logger.error(f"Error in search_tours: {e}")
        await query.message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        
        # Provide option to start over
        keyboard = [[InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tours")]]
        await query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ?",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SELECTING_ACTION

async def initiate_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Begin the booking process by collecting user information."""
    query = update.callback_query
    user_id = query.from_user.id
    tour_id = query.data.split("_")[1]
    
    # Store the selected tour
    user_sessions[user_id]["tour_id"] = tour_id
    
    # Find the selected tour details
    selected_tour = None
    for tour in user_sessions[user_id].get("tours", []):
        if tour["id"] == tour_id:
            selected_tour = tour
            break
    
    if selected_tour:
        tour_info = format_tour_details(selected_tour)
        user_sessions[user_id]["selected_tour_info"] = tour_info
        
        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n{tour_info}\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
            parse_mode='Markdown'
        )
        
        return COLLECT_NAME
    else:
        await query.message.reply_text(
            "üòî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—É—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ."
        )
        return SELECTING_ACTION

async def collect_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Collect the user's name for booking."""
    user_id = update.effective_user.id
    user_sessions[user_id]["name"] = update.message.text
    
    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )
    
    return COLLECT_PHONE

async def collect_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Collect the user's phone number for booking."""
    user_id = update.effective_user.id
    user_sessions[user_id]["phone"] = update.message.text
    
    # Summarize booking details for confirmation
    tour_info = user_sessions[user_id]["selected_tour_info"]
    name = user_sessions[user_id]["name"]
    phone = user_sessions[user_id]["phone"]
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_booking")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")]
    ]
    
    await update.message.reply_text(
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n"
        f"{tour_info}\n\n"
        f"*–ò–º—è*: {name}\n"
        f"*–¢–µ–ª–µ—Ñ–æ–Ω*: {phone}\n\n"
        f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    
    return CONFIRM_BOOKING

async def finalize_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Complete the booking process."""
    query = update.callback_query
    user_id = query.from_user.id
    
    # In a real implementation, this would send the booking to the API
    # For now, we'll just confirm to the user
    
    await query.message.reply_text(
        "‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ–ø–ª–∞—Ç—ã.\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä Crystal Bay Travel! üèùÔ∏è"
    )
    
    # Clean up session data
    if user_id in user_sessions:
        del user_sessions[user_id]
    
    # Provide option to start a new search
    keyboard = [[InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_tours")]]
    await query.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –µ—â–µ –æ–¥–∏–Ω —Ç—É—Ä?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_ACTION

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Handle free text messages from user using NLP."""
    message_text = update.message.text
    user_id = update.effective_user.id
    
    # Process the message using OpenAI
    response = await process_message(message_text, user_sessions.get(user_id, {}))
    
    # Send the response
    await update.message.reply_text(response)
    
    # Add a keyboard with common actions
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç—É—Ä–æ–≤", callback_data="search_tours")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    
    await update.message.reply_text(
        "–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SELECTING_ACTION

def main():
    """Start the bot."""
    # Create the Application
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # Setup conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_ACTION: [
                CallbackQueryHandler(callback_handler),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
            ],
            SELECTING_CITY: [CallbackQueryHandler(callback_handler)],
            SELECTING_COUNTRY: [CallbackQueryHandler(callback_handler)],
            SELECTING_DATES: [CallbackQueryHandler(callback_handler)],
            BOOKING_TOUR: [CallbackQueryHandler(callback_handler)],
            COLLECT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_name)],
            COLLECT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_phone)],
            CONFIRM_BOOKING: [CallbackQueryHandler(callback_handler)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    application.add_handler(conv_handler)
    
    # Add standalone command handlers
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("search", select_departure_city))
    
    # Start the Bot
    logger.info("Bot is running...")
    application.run_polling()

if __name__ == '__main__':
    main()
