"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Crystal Bay Travel System
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional

logger = logging.getLogger(__name__)

class SettingsManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.settings_file = "settings.json"
        self.backup_dir = "settings_backup"
        self._settings = {}
        self._load_settings()
    
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.settings_file):
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    self._settings = json.load(f)
                logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self._settings = self._get_default_settings()
                self._save_settings()
                logger.info("–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self._settings = self._get_default_settings()
    
    def _get_default_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "system": {
                "name": "Crystal Bay Travel",
                "version": "1.0.0",
                "language": "ru",
                "timezone": "Asia/Almaty",
                "debug_mode": False,
                "auto_backup": True,
                "backup_interval": 24  # —á–∞—Å—ã
            },
            "integrations": {
                "samo_api": {
                    "enabled": True,
                    "endpoint": "https://booking-kz.crystalbay.com/export/default.php",
                    "oauth_token": os.getenv("SAMO_OAUTH_TOKEN", ""),
                    "timeout": 30,
                    "max_retries": 3,
                    "default_currency": "USD",
                    "default_departure": "1"  # –ê–ª–º–∞—Ç—ã
                },
                "telegram_bot": {
                    "enabled": True,
                    "token": os.getenv("TELEGRAM_BOT_TOKEN", ""),
                    "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crystal Bay Travel! üåä",
                    "auto_respond": True,
                    "response_timeout": 30
                },
                "openai": {
                    "enabled": True,
                    "api_key": os.getenv("OPENAI_API_KEY", ""),
                    "model": "gpt-4o",
                    "temperature": 0.7,
                    "max_tokens": 1500,
                    "language": "ru"
                },
                "wazzup24": {
                    "enabled": True,
                    "api_key": os.getenv("WAZZUP_API_KEY", ""),
                    "api_secret": os.getenv("WAZZUP_API_SECRET", ""),
                    "base_url": "https://api.wazzup24.com/v3",
                    "client_api_key": os.getenv("WAZZUP_CLIENT_KEY", ""),
                    "webhook_url": "",
                    "auto_create_contacts": True,
                    "auto_create_deals": True
                },
                "bitrix24": {
                    "enabled": False,
                    "webhook_url": os.getenv("BITRIX_WEBHOOK_URL", ""),
                    "access_token": os.getenv("BITRIX_ACCESS_TOKEN", ""),
                    "domain": os.getenv("BITRIX_DOMAIN", ""),
                    "pipeline_id": "",
                    "auto_sync": True,
                    "lead_source": "Crystal Bay CRM"
                },
                "sendgrid": {
                    "enabled": False,
                    "api_key": os.getenv("SENDGRID_API_KEY", ""),
                    "from_email": os.getenv("SENDGRID_FROM_EMAIL", "noreply@crystalbay.travel"),
                    "templates": {
                        "booking_confirmation": "",
                        "booking_reminder": "",
                        "lead_notification": ""
                    },
                    "auto_notify": True
                },
                "supabase": {
                    "enabled": True,
                    "url": os.getenv("SUPABASE_URL", ""),
                    "key": os.getenv("SUPABASE_KEY", ""),
                    "auto_sync": True,
                    "sync_interval": 5  # –º–∏–Ω—É—Ç—ã
                }
            },
            "business": {
                "company_name": "Crystal Bay Travel",
                "company_phone": "+7 (777) 123-45-67",
                "company_email": "info@crystalbay.travel",
                "company_address": "–ê–ª–º–∞—Ç—ã, –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω",
                "working_hours": "9:00 - 18:00",
                "timezone": "Asia/Almaty",
                "currency": "USD",
                "language": "ru",
                "auto_lead_assignment": True,
                "lead_response_time": 60,  # –º–∏–Ω—É—Ç—ã
                "booking_confirmation_required": True
            },
            "notifications": {
                "email_notifications": True,
                "sms_notifications": False,
                "telegram_notifications": True,
                "new_lead_notification": True,
                "booking_confirmation_notification": True,
                "payment_notification": True,
                "system_alerts": True,
                "daily_reports": True,
                "weekly_reports": False
            },
            "logging": {
                "level": "INFO",
                "enable_file_logging": True,
                "log_file": "crystal_bay.log",
                "max_log_size": "10MB",
                "backup_count": 5,
                "log_format": "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
            },
            "last_updated": datetime.now().isoformat(),
            "created": datetime.now().isoformat()
        }
    
    def get_setting(self, path: str, default=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'integrations.samo_api.enabled')"""
        try:
            keys = path.split('.')
            value = self._settings
            for key in keys:
                value = value[key]
            return value
        except (KeyError, TypeError):
            return default
    
    def set_setting(self, path: str, value: Any):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø—É—Ç–∏"""
        try:
            keys = path.split('.')
            settings = self._settings
            for key in keys[:-1]:
                if key not in settings:
                    settings[key] = {}
                settings = settings[key]
            settings[keys[-1]] = value
            self._settings["last_updated"] = datetime.now().isoformat()
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {path} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {path}: {e}")
            return False
    
    def update_settings(self, updates: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        try:
            for path, value in updates.items():
                self.set_setting(path, value)
            self._save_settings()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(updates)} –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            self._create_backup()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self._settings['_metadata'] = {
                'last_updated': datetime.now().isoformat(),
                'version': self._settings.get('system', {}).get('version', '1.0.0')
            }
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = self.settings_file + '.tmp'
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(self._settings, f, indent=2, ensure_ascii=False)
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏
            os.replace(temp_file, self.settings_file)
            
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if os.path.exists(self.settings_file + '.tmp'):
                os.remove(self.settings_file + '.tmp')
            return False
    
    def _create_backup(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            if not os.path.exists(self.backup_dir):
                os.makedirs(self.backup_dir)
            
            if os.path.exists(self.settings_file):
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_path = os.path.join(self.backup_dir, f"settings_{timestamp}.json")
                
                import shutil
                shutil.copy2(self.settings_file, backup_path)
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10)
                self._cleanup_old_backups()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
    
    def _cleanup_old_backups(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10"""
        try:
            if not os.path.exists(self.backup_dir):
                return
                
            backup_files = []
            for filename in os.listdir(self.backup_dir):
                if filename.startswith("settings_") and filename.endswith(".json"):
                    filepath = os.path.join(self.backup_dir, filename)
                    backup_files.append((filepath, os.path.getctime(filepath)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è
            backup_files.sort(key=lambda x: x[1], reverse=True)
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 10-–≥–æ
            for filepath, _ in backup_files[10:]:
                os.remove(filepath)
                logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {filepath}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
    
    def update_setting(self, path: str, value: Any) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–æ –ø—É—Ç–∏
        path: —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ 'integrations.samo_api.enabled'
        """
        try:
            keys = path.split('.')
            current = self._settings
            
            # –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –¥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            for key in keys[:-1]:
                if key not in current:
                    current[key] = {}
                current = current[key]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            old_value = current.get(keys[-1])
            current[keys[-1]] = value
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if self._save_settings():
                logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {path} –∏–∑–º–µ–Ω–µ–Ω–∞: {old_value} -> {value}")
                return True
            else:
                # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                current[keys[-1]] = old_value
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {path}: {e}")
            return False
    
    def update_multiple_settings(self, updates: Dict[str, Any]) -> Dict[str, bool]:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        """
        results = {}
        rollback_needed = False
        original_settings = json.loads(json.dumps(self._settings))  # Deep copy
        
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            for path, value in updates.items():
                keys = path.split('.')
                current = self._settings
                
                # –ù–∞–≤–∏–≥–∏—Ä—É–µ–º –¥–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                for key in keys[:-1]:
                    if key not in current:
                        current[key] = {}
                    current = current[key]
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                current[keys[-1]] = value
                results[path] = True
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            if self._save_settings():
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(updates)}")
                return results
            else:
                rollback_needed = True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            rollback_needed = True
        
        if rollback_needed:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self._settings = original_settings
            return {path: False for path in updates.keys()}
        
        return results
    
    def validate_integration_config(self, integration: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫
        """
        try:
            config = self.get_setting(f'integrations.{integration}')
            if not config:
                return {
                    'status': 'error',
                    'message': f'–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {integration} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    'errors': ['Configuration not found']
                }
            
            errors = []
            warnings = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∫–∞–∂–¥–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
            if integration == 'samo_api':
                if not config.get('oauth_token'):
                    errors.append('OAuth —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω')
                if not config.get('endpoint'):
                    errors.append('Endpoint API –Ω–µ —É–∫–∞–∑–∞–Ω')
            
            elif integration == 'telegram_bot':
                if not config.get('token'):
                    errors.append('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω')
            
            elif integration == 'openai':
                if not config.get('api_key'):
                    errors.append('API –∫–ª—é—á OpenAI –Ω–µ —É–∫–∞–∑–∞–Ω')
                if config.get('temperature', 0) > 1.0:
                    warnings.append('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –±–æ–ª—å—à–µ 1.0 –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')
            
            elif integration == 'wazzup24':
                if not config.get('api_key'):
                    errors.append('API –∫–ª—é—á Wazzup24 –Ω–µ —É–∫–∞–∑–∞–Ω')
                if not config.get('api_secret'):
                    errors.append('API —Å–µ–∫—Ä–µ—Ç Wazzup24 –Ω–µ —É–∫–∞–∑–∞–Ω')
            
            elif integration == 'bitrix24':
                if not config.get('webhook_url') and not config.get('access_token'):
                    errors.append('–ù–µ —É–∫–∞–∑–∞–Ω webhook URL –∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞')
            
            elif integration == 'sendgrid':
                if not config.get('api_key'):
                    errors.append('API –∫–ª—é—á SendGrid –Ω–µ —É–∫–∞–∑–∞–Ω')
                if not config.get('from_email'):
                    errors.append('Email –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ —É–∫–∞–∑–∞–Ω')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if errors:
                status = 'error'
                message = f'–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(errors)}'
            elif warnings:
                status = 'warning'
                message = f'–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}'
            else:
                status = 'success'
                message = '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞'
            
            return {
                'status': status,
                'message': message,
                'errors': errors,
                'warnings': warnings,
                'enabled': config.get('enabled', False)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ {integration}: {e}")
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}',
                'errors': [str(e)]
            }
    
    def export_settings(self, export_path: Optional[str] = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
        try:
            if not export_path:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                export_path = f"settings_export_{timestamp}.json"
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            export_data = self._settings.copy()
            
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            secret_fields = [
                "integrations.samo_api.oauth_token",
                "integrations.telegram_bot.token",
                "integrations.openai.api_key",
                "integrations.supabase.key",
                "integrations.sendgrid.api_key",
                "integrations.wazzup.api_key",
                "integrations.wazzup.api_secret",
                "integrations.bitrix24.access_token"
            ]
            
            for field in secret_fields:
                value = self.get_setting(field)
                if value:
                    masked_value = value[:4] + "*" * (len(value) - 8) + value[-4:] if len(value) > 8 else "*" * len(value)
                    self.set_setting_in_dict(export_data, field, masked_value)
            
            with open(export_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {export_path}")
            return export_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            raise
    
    def set_setting_in_dict(self, data_dict: Dict, path: str, value: Any):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ –ø—É—Ç–∏"""
        keys = path.split('.')
        current = data_dict
        for key in keys[:-1]:
            if key not in current:
                current[key] = {}
            current = current[key]
        current[keys[-1]] = value
    
    def backup_settings(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            os.makedirs(self.backup_dir, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(self.backup_dir, f"settings_backup_{timestamp}.json")
            
            with open(backup_path, 'w', encoding='utf-8') as f:
                json.dump(self._settings, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return backup_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            raise
    
    def restore_settings(self, backup_path: str):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            with open(backup_path, 'r', encoding='utf-8') as f:
                self._settings = json.load(f)
            
            self._save_settings()
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ {backup_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def get_integration_status(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        integrations = self.get_setting("integrations", {})
        status = {}
        
        for name, config in integrations.items():
            if not isinstance(config, dict):
                continue
                
            enabled = config.get("enabled", False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = self._get_required_fields(name)
            has_required = all(config.get(field) for field in required_fields)
            
            status[name] = {
                "enabled": enabled,
                "configured": has_required,
                "status": "active" if enabled and has_required else "inactive" if enabled else "disabled",
                "last_check": datetime.now().isoformat()
            }
        
        return status
    
    def _get_required_fields(self, integration_name: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        required_map = {
            "samo_api": ["oauth_token", "endpoint"],
            "telegram_bot": ["token"],
            "openai": ["api_key"],
            "supabase": ["url", "key"],
            "sendgrid": ["api_key", "from_email"],
            "wazzup": ["api_key", "api_secret"],
            "bitrix24": ["webhook_url"]
        }
        return required_map.get(integration_name, [])
    
    def validate_settings(self) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫"""
        errors = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integrations = self.get_setting("integrations", {})
        for name, config in integrations.items():
            if not isinstance(config, dict):
                continue
                
            if config.get("enabled", False):
                required_fields = self._get_required_fields(name)
                missing_fields = [field for field in required_fields if not config.get(field)]
                
                if missing_fields:
                    errors[name] = [f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        system_errors = []
        if not self.get_setting("business.company_name"):
            system_errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
        if not self.get_setting("business.contact_email"):
            system_errors.append("–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email")
            
        if system_errors:
            errors["system"] = system_errors
        
        return errors
    
    def get_all_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return self._settings.copy()
    
    def reset_to_defaults(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.backup_settings()  # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        self._settings = self._get_default_settings()
        self._save_settings()
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

    def _test_samo_api(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SAMO API"""
        try:
            import requests
            
            endpoint = config.get('endpoint')
            token = config.get('oauth_token')
            
            if not endpoint or not token:
                return {
                    'status': 'error',
                    'message': '–ù–µ —É–∫–∞–∑–∞–Ω endpoint –∏–ª–∏ —Ç–æ–∫–µ–Ω'
                }
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            test_data = {
                'samo_action': 'api',
                'version': '1.0',
                'type': 'json',
                'oauth_token': token
            }
            
            response = requests.post(endpoint, data=test_data, timeout=10)
            
            if response.status_code == 200:
                return {
                    'status': 'success',
                    'message': '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SAMO API —Ä–∞–±–æ—Ç–∞–µ—Ç'
                }
            else:
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    def _test_telegram_bot(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Telegram Bot API"""
        try:
            import requests
            
            token = config.get('token')
            if not token:
                return {
                    'status': 'error',
                    'message': '–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'
                }
            
            url = f"https://api.telegram.org/bot{token}/getMe"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    bot_info = data.get('result', {})
                    return {
                        'status': 'success',
                        'message': f'–ë–æ—Ç {bot_info.get("first_name", "Unknown")} –∞–∫—Ç–∏–≤–µ–Ω'
                    }
                else:
                    return {
                        'status': 'error',
                        'message': f'–û—à–∏–±–∫–∞ API: {data.get("description", "Unknown error")}'
                    }
            else:
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    def _test_openai(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OpenAI API"""
        try:
            from openai import OpenAI
            
            api_key = config.get('api_key')
            if not api_key:
                return {
                    'status': 'error',
                    'message': 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω'
                }
            
            client = OpenAI(api_key=api_key)
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            response = client.chat.completions.create(
                model=config.get('model', 'gpt-4o'),
                messages=[{"role": "user", "content": "test"}],
                max_tokens=5
            )
            
            if response.choices:
                return {
                    'status': 'success',
                    'message': 'OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
                }
            else:
                return {
                    'status': 'error',
                    'message': '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ OpenAI API: {str(e)}'
            }
    
    def _test_wazzup24(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Wazzup24 API"""
        try:
            import requests
            import base64
            
            api_key = config.get('api_key')
            api_secret = config.get('api_secret')
            base_url = config.get('base_url', 'https://api.wazzup24.com/v3')
            
            if not api_key or not api_secret:
                return {
                    'status': 'error',
                    'message': 'API –∫–ª—é—á –∏–ª–∏ —Å–µ–∫—Ä–µ—Ç –Ω–µ —É–∫–∞–∑–∞–Ω—ã'
                }
            
            # –°–æ–∑–¥–∞–µ–º Basic Auth header
            credentials = f"{api_key}:{api_secret}"
            encoded_credentials = base64.b64encode(credentials.encode()).decode()
            
            headers = {
                'Authorization': f'Basic {encoded_credentials}',
                'Content-Type': 'application/json'
            }
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            url = f"{base_url}/profile"
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                return {
                    'status': 'success',
                    'message': 'Wazzup24 API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
                }
            else:
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    def _test_bitrix24(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Bitrix24 API"""
        try:
            import requests
            
            webhook_url = config.get('webhook_url')
            access_token = config.get('access_token')
            domain = config.get('domain')
            
            if not webhook_url and not (access_token and domain):
                return {
                    'status': 'error',
                    'message': '–ù–µ —É–∫–∞–∑–∞–Ω webhook URL –∏–ª–∏ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞'
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if webhook_url:
                url = f"{webhook_url}/profile"
            else:
                url = f"https://{domain}/rest/{access_token}/profile"
            
            response = requests.get(url, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if 'result' in data:
                    return {
                        'status': 'success',
                        'message': 'Bitrix24 API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
                    }
                else:
                    return {
                        'status': 'warning',
                        'message': 'API –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã'
                    }
            else:
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    def _test_sendgrid(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç SendGrid API"""
        try:
            import requests
            
            api_key = config.get('api_key')
            if not api_key:
                return {
                    'status': 'error',
                    'message': 'API –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω'
                }
            
            headers = {
                'Authorization': f'Bearer {api_key}',
                'Content-Type': 'application/json'
            }
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
            url = "https://api.sendgrid.com/v3/user/account"
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                return {
                    'status': 'success',
                    'message': 'SendGrid API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
                }
            else:
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }
    
    def _test_supabase(self, config: Dict[str, Any]) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        try:
            import requests
            
            url = config.get('url')
            key = config.get('key')
            
            if not url or not key:
                return {
                    'status': 'error',
                    'message': 'URL –∏–ª–∏ –∫–ª—é—á –Ω–µ —É–∫–∞–∑–∞–Ω—ã'
                }
            
            headers = {
                'apikey': key,
                'Content-Type': 'application/json'
            }
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            test_url = f"{url}/rest/v1/"
            response = requests.get(test_url, headers=headers, timeout=10)
            
            if response.status_code in [200, 404]:  # 404 —Ç–æ–∂–µ OK, –∑–Ω–∞—á–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                return {
                    'status': 'success',
                    'message': 'Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
                }
            else:
                return {
                    'status': 'error',
                    'message': f'–û—à–∏–±–∫–∞ HTTP: {response.status_code}'
                }
                
        except Exception as e:
            return {
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}'
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_manager = SettingsManager()