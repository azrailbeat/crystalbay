"""
–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è Crystal Bay Travel System
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional

logger = logging.getLogger(__name__)

class SettingsManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.settings_file = "settings.json"
        self.backup_dir = "settings_backup"
        self._settings = {}
        self._load_settings()
    
    def _load_settings(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.settings_file):
                with open(self.settings_file, 'r', encoding='utf-8') as f:
                    self._settings = json.load(f)
                logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                self._settings = self._get_default_settings()
                self._save_settings()
                logger.info("–°–æ–∑–¥–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            self._settings = self._get_default_settings()
    
    def _get_default_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "system": {
                "name": "Crystal Bay Travel",
                "version": "1.0.0",
                "language": "ru",
                "timezone": "Asia/Almaty",
                "debug_mode": False,
                "auto_backup": True,
                "backup_interval": 24  # —á–∞—Å—ã
            },
            "integrations": {
                "samo_api": {
                    "enabled": True,
                    "endpoint": "https://booking-kz.crystalbay.com/export/default.php",
                    "oauth_token": os.getenv("SAMO_OAUTH_TOKEN", ""),
                    "timeout": 30,
                    "max_retries": 3,
                    "default_currency": "USD",
                    "default_departure": "1"  # –ê–ª–º–∞—Ç—ã
                },
                "telegram_bot": {
                    "enabled": True,
                    "token": os.getenv("TELEGRAM_BOT_TOKEN", ""),
                    "welcome_message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crystal Bay Travel! üåä",
                    "auto_respond": True,
                    "response_timeout": 30
                },
                "openai": {
                    "enabled": True,
                    "api_key": os.getenv("OPENAI_API_KEY", ""),
                    "model": "gpt-4o",
                    "temperature": 0.7,
                    "max_tokens": 1500,
                    "language": "ru"
                },
                "supabase": {
                    "enabled": True,
                    "url": os.getenv("SUPABASE_URL", ""),
                    "key": os.getenv("SUPABASE_KEY", ""),
                    "auto_sync": True,
                    "sync_interval": 5  # –º–∏–Ω—É—Ç—ã
                },
                "sendgrid": {
                    "enabled": False,
                    "api_key": os.getenv("SENDGRID_API_KEY", ""),
                    "from_email": os.getenv("SENDGRID_FROM_EMAIL", "noreply@crystalbay.travel"),
                    "templates": {
                        "booking_confirmation": "",
                        "booking_reminder": "",
                        "lead_notification": ""
                    }
                },
                "wazzup": {
                    "enabled": False,
                    "api_key": os.getenv("WAZZUP_API_KEY", ""),
                    "api_secret": os.getenv("WAZZUP_API_SECRET", ""),
                    "webhook_url": "",
                    "auto_process": True
                },
                "bitrix24": {
                    "enabled": True,
                    "webhook_url": os.getenv("BITRIX_WEBHOOK_URL", ""),
                    "access_token": os.getenv("BITRIX_ACCESS_TOKEN", ""),
                    "pipeline_id": "7",
                    "auto_create_leads": True,
                    "sync_contacts": True
                }
            },
            "notifications": {
                "email_enabled": False,
                "telegram_enabled": True,
                "push_enabled": False,
                "new_lead_notification": True,
                "booking_confirmation": True,
                "system_alerts": True,
                "notification_channels": {
                    "critical": ["telegram", "email"],
                    "warning": ["telegram"],
                    "info": ["system"]
                }
            },
            "business": {
                "company_name": "Crystal Bay Travel",
                "contact_email": "info@crystalbay.travel",
                "contact_phone": "+7 (999) 123-45-67",
                "website": "https://crystalbay.travel",
                "office_hours": {
                    "start": "09:00",
                    "end": "18:00",
                    "timezone": "Asia/Almaty",
                    "working_days": [1, 2, 3, 4, 5]  # –ü–Ω-–ü—Ç
                },
                "currency": "USD",
                "default_markup": 10,  # %
                "commission_rate": 5,  # %
            },
            "ui": {
                "theme": "light",
                "sidebar_collapsed": False,
                "default_page": "dashboard",
                "items_per_page": 20,
                "auto_refresh": True,
                "refresh_interval": 30,  # —Å–µ–∫—É–Ω–¥—ã
                "show_tooltips": True,
                "compact_mode": False
            },
            "security": {
                "session_timeout": 3600,  # —Å–µ–∫—É–Ω–¥—ã
                "max_login_attempts": 5,
                "password_min_length": 8,
                "require_2fa": False,
                "api_rate_limit": 100,  # –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
                "log_level": "INFO"
            },
            "analytics": {
                "track_user_actions": True,
                "track_api_calls": True,
                "retention_days": 90,
                "export_format": "json",
                "auto_reports": True,
                "report_frequency": "weekly"
            },
            "last_updated": datetime.now().isoformat(),
            "created": datetime.now().isoformat()
        }
    
    def get_setting(self, path: str, default=None):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'integrations.samo_api.enabled')"""
        try:
            keys = path.split('.')
            value = self._settings
            for key in keys:
                value = value[key]
            return value
        except (KeyError, TypeError):
            return default
    
    def set_setting(self, path: str, value: Any):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –ø—É—Ç–∏"""
        try:
            keys = path.split('.')
            settings = self._settings
            for key in keys[:-1]:
                if key not in settings:
                    settings[key] = {}
                settings = settings[key]
            settings[keys[-1]] = value
            self._settings["last_updated"] = datetime.now().isoformat()
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {path} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {path}: {e}")
            return False
    
    def update_settings(self, updates: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        try:
            for path, value in updates.items():
                self.set_setting(path, value)
            self._save_settings()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(updates)} –Ω–∞—Å—Ç—Ä–æ–µ–∫")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def _save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.settings_file, 'w', encoding='utf-8') as f:
                json.dump(self._settings, f, ensure_ascii=False, indent=2)
            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def export_settings(self, export_path: Optional[str] = None) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ JSON —Ñ–∞–π–ª"""
        try:
            if not export_path:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                export_path = f"settings_export_{timestamp}.json"
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            export_data = self._settings.copy()
            
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            secret_fields = [
                "integrations.samo_api.oauth_token",
                "integrations.telegram_bot.token",
                "integrations.openai.api_key",
                "integrations.supabase.key",
                "integrations.sendgrid.api_key",
                "integrations.wazzup.api_key",
                "integrations.wazzup.api_secret",
                "integrations.bitrix24.access_token"
            ]
            
            for field in secret_fields:
                value = self.get_setting(field)
                if value:
                    masked_value = value[:4] + "*" * (len(value) - 8) + value[-4:] if len(value) > 8 else "*" * len(value)
                    self.set_setting_in_dict(export_data, field, masked_value)
            
            with open(export_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {export_path}")
            return export_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            raise
    
    def set_setting_in_dict(self, data_dict: Dict, path: str, value: Any):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä–µ –ø–æ –ø—É—Ç–∏"""
        keys = path.split('.')
        current = data_dict
        for key in keys[:-1]:
            if key not in current:
                current[key] = {}
            current = current[key]
        current[keys[-1]] = value
    
    def backup_settings(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            os.makedirs(self.backup_dir, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(self.backup_dir, f"settings_backup_{timestamp}.json")
            
            with open(backup_path, 'w', encoding='utf-8') as f:
                json.dump(self._settings, f, ensure_ascii=False, indent=2)
            
            logger.info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return backup_path
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            raise
    
    def restore_settings(self, backup_path: str):
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        try:
            with open(backup_path, 'r', encoding='utf-8') as f:
                self._settings = json.load(f)
            
            self._save_settings()
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ {backup_path}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def get_integration_status(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        integrations = self.get_setting("integrations", {})
        status = {}
        
        for name, config in integrations.items():
            if not isinstance(config, dict):
                continue
                
            enabled = config.get("enabled", False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            required_fields = self._get_required_fields(name)
            has_required = all(config.get(field) for field in required_fields)
            
            status[name] = {
                "enabled": enabled,
                "configured": has_required,
                "status": "active" if enabled and has_required else "inactive" if enabled else "disabled",
                "last_check": datetime.now().isoformat()
            }
        
        return status
    
    def _get_required_fields(self, integration_name: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        required_map = {
            "samo_api": ["oauth_token", "endpoint"],
            "telegram_bot": ["token"],
            "openai": ["api_key"],
            "supabase": ["url", "key"],
            "sendgrid": ["api_key", "from_email"],
            "wazzup": ["api_key", "api_secret"],
            "bitrix24": ["webhook_url"]
        }
        return required_map.get(integration_name, [])
    
    def validate_settings(self) -> Dict[str, List[str]]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫"""
        errors = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        integrations = self.get_setting("integrations", {})
        for name, config in integrations.items():
            if not isinstance(config, dict):
                continue
                
            if config.get("enabled", False):
                required_fields = self._get_required_fields(name)
                missing_fields = [field for field in required_fields if not config.get(field)]
                
                if missing_fields:
                    errors[name] = [f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        system_errors = []
        if not self.get_setting("business.company_name"):
            system_errors.append("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏")
        if not self.get_setting("business.contact_email"):
            system_errors.append("–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π email")
            
        if system_errors:
            errors["system"] = system_errors
        
        return errors
    
    def get_all_settings(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        return self._settings.copy()
    
    def reset_to_defaults(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.backup_settings()  # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        self._settings = self._get_default_settings()
        self._save_settings()
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_manager = SettingsManager()