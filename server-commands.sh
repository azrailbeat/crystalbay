#!/bin/bash

# Crystal Bay Travel Server Setup Commands
# –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: 46.250.234.89

echo "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Crystal Bay Travel –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."

# 1. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /root/cbay/crystalbay/

# 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Dockerfile
cat > Dockerfile.optimized << 'EOF'
FROM python:3.11-slim

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV FLASK_ENV=production

WORKDIR /app

RUN apt-get update && apt-get install -y \
    gcc \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

COPY requirements_production.txt ./
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements_production.txt

COPY . .

RUN useradd -m -s /bin/bash crystalbay && \
    chown -R crystalbay:crystalbay /app
USER crystalbay

RUN mkdir -p /app/static/uploads /app/logs

EXPOSE 5000

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "3", "--timeout", "120", "main:app"]
EOF

# 3. –°–æ–∑–¥–∞–Ω–∏–µ requirements_production.txt
cat > requirements_production.txt << 'EOF'
Flask==3.0.0
Flask-CORS==4.0.0
Flask-SQLAlchemy==3.1.1
gunicorn==21.2.0
psycopg2-binary==2.9.9
python-dotenv==1.0.0
requests==2.31.0
email-validator==2.1.0
notion-client==2.2.1
openai==1.3.7
python-http-client==3.3.7
sendgrid==6.10.0
supabase==2.0.2
python-telegram-bot==20.7
telegram==0.0.1
trafilatura==1.6.4
EOF

# 4. –°–æ–∑–¥–∞–Ω–∏–µ production docker-compose
cat > docker-compose.production.yml << 'EOF'
version: '3.8'

services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile.optimized
    ports:
      - "80:80"
    environment:
      - DATABASE_URL=postgresql://crystalbay:secure_password@db:5432/crystalbay_db
      - FLASK_ENV=production
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - SAMO_OAUTH_TOKEN=${SAMO_OAUTH_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - WAZZUP_API_KEY=${WAZZUP_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static_files:/app/static
      - app_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: crystalbay_db
      POSTGRES_USER: crystalbay
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U crystalbay -d crystalbay_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  static_files:
  app_logs:
  redis_data:
EOF

# 5. –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
cat > .env << 'EOF'
# Flask Configuration
FLASK_ENV=production
FLASK_SECRET_KEY=–ò–ó–ú–ï–ù–ò–¢–ï_–ù–ê_–ë–ï–ó–û–ü–ê–°–ù–´–ô_–ö–õ–Æ–ß_32_–°–ò–ú–í–û–õ–ê

# Database Configuration
DATABASE_URL=postgresql://crystalbay:secure_password@db:5432/crystalbay_db

# SAMO API Configuration - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ù–ê–°–¢–†–û–ô–¢–ï
SAMO_OAUTH_TOKEN=–í–ê–®_SAMO_OAUTH_TOKEN

# OpenAI Configuration (optional)
OPENAI_API_KEY=–í–ê–®_OPENAI_API_KEY

# Telegram Bot Configuration (optional)
TELEGRAM_BOT_TOKEN=–í–ê–®_TELEGRAM_BOT_TOKEN

# Wazzup24 API Configuration (optional)
WAZZUP_API_KEY=–í–ê–®_WAZZUP_API_KEY

# Supabase Configuration (optional)
SUPABASE_URL=–í–ê–®_SUPABASE_URL
SUPABASE_KEY=–í–ê–®_SUPABASE_KEY
EOF

# 6. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞
cat > docker-run.sh << 'EOF'
#!/bin/bash
set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ Crystal Bay Travel..."

if [ ! -f ".env" ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    exit 1
fi

echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.production.yml down || true

echo "üî® –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
docker-compose -f docker-compose.production.yml build --no-cache

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.production.yml up -d

echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞..."
sleep 30

echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è..."
docker-compose -f docker-compose.production.yml ps

if curl -s http://localhost/health > /dev/null; then
    echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!"
    echo "üåê –î–æ—Å—Ç—É–ø–Ω–æ: http://46.250.234.89"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞"
    docker-compose -f docker-compose.production.yml logs web
fi
EOF

# 7. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
cat > update-app.sh << 'EOF'
#!/bin/bash
set -e

echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."

# Backup
BACKUP_FILE="backup_$(date +%Y%m%d_%H%M%S).sql"
docker-compose -f docker-compose.production.yml exec -T db pg_dump -U crystalbay crystalbay_db > $BACKUP_FILE || true

# Git update
git pull origin main

# Restart
docker-compose -f docker-compose.production.yml build --no-cache web
docker-compose -f docker-compose.production.yml up -d

sleep 15
if curl -s http://localhost/health > /dev/null; then
    echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
fi
EOF

# 8. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
chmod +x docker-run.sh
chmod +x update-app.sh

echo ""
echo "üìù –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã. –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo ""
echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω):"
echo "   curl -fsSL https://get.docker.com -o get-docker.sh"
echo "   sudo sh get-docker.sh"
echo "   sudo apt install docker-compose -y"
echo ""
echo "2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –∫–ª—é—á–∞–º–∏:"
echo "   nano .env"
echo ""
echo "3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:"
echo "   python3 -c \"import secrets; print(secrets.token_hex(32))\""
echo ""
echo "4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:"
echo "   ./docker-run.sh"
echo ""
echo "5. –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Git:"
echo "   ./update-app.sh"
echo ""
echo "üåê –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞: http://46.250.234.89"
echo "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å IP 46.250.234.89 –≤ SAMO whitelist!"