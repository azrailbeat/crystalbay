#!/usr/bin/env python3
"""
Test script to demonstrate data persistence functionality
Shows that the system can create, save, and retrieve leads successfully
"""

import json
import os
from datetime import datetime
from models import lead_service

def test_data_persistence():
    """Test lead creation and persistence"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–û–•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # Test 1: Create new lead
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏...")
    test_lead_data = {
        'customer_name': '–¢–µ—Å—Ç –ö–ª–∏–µ–Ω—Ç –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏',
        'email': 'test@persistence.com',
        'phone': '+7 777 999 8888',
        'source': 'test_script',
        'status': 'new',
        'notes': '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö',
        'tags': ['–¢–µ—Å—Ç', '–ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å'],
        'priority': 'high'
    }
    
    try:
        new_lead = lead_service.create_lead(test_lead_data)
        print(f"‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å ID: {new_lead['id']}")
        print(f"   –ö–ª–∏–µ–Ω—Ç: {new_lead['customer_name']}")
        print(f"   Email: {new_lead['email']}")
        print(f"   –°—Ç–∞—Ç—É—Å: {new_lead['status']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return False
    
    # Test 2: Retrieve all leads
    print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫...")
    try:
        all_leads = lead_service.get_all_leads()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(all_leads)} –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ")
        
        for lead in all_leads:
            print(f"   - {lead['id']}: {lead.get('customer_name', lead.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏'))}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
        return False
    
    # Test 3: Check persistent storage file
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
    storage_file = 'data/memory_leads.json'
    
    if os.path.exists(storage_file):
        try:
            with open(storage_file, 'r', encoding='utf-8') as f:
                stored_data = json.load(f)
            print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {len(stored_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # Show latest entries
            if stored_data:
                print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏:")
                for lead in stored_data[-3:]:  # Show last 3
                    name = lead.get('customer_name') or lead.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
                    created = lead.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    print(f"   - {name} ({created[:10]})")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            return False
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {storage_file}")
        return False
    
    # Test 4: Update lead status
    print("\n4Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏...")
    try:
        updated_lead = lead_service.update_lead_status(new_lead['id'], 'in_progress')
        if updated_lead:
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {updated_lead['status']}")
        else:
            print("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    return True

def show_system_status():
    """Show current system status"""
    print("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    # SAMO API Status
    print(f"üîå SAMO API: –ì–æ—Ç–æ–≤ (–æ–∂–∏–¥–∞–µ—Ç whitelist IP)")
    
    # Data storage status
    storage_file = 'data/memory_leads.json'
    if os.path.exists(storage_file):
        try:
            with open(storage_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            print(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {len(data)} –∑–∞—è–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        except:
            print(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
    else:
        print(f"üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # API endpoints status
    print(f"üåê API Endpoints: –ê–∫—Ç–∏–≤–Ω—ã")
    print(f"   /api/leads - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏")
    print(f"   /api/samo/leads/sync - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è SAMO")
    print(f"   /api/samo/leads/test - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    
    print(f"üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == '__main__':
    success = test_data_persistence()
    show_system_status()
    
    if success:
        print(f"\n‚úÖ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–ê")
    else:
        print(f"\n‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´")