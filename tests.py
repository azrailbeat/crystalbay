#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Crystal Bay Travel
"""

import unittest
import requests
import json
import os
import sys
from datetime import datetime

class CrystalBayTravelTests(unittest.TestCase):
    """–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã Crystal Bay Travel"""
    
    @classmethod
    def setUpClass(cls):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        cls.base_url = "http://localhost:5000"
        cls.test_results = []
        
    def test_01_health_check(self):
        """–¢–µ—Å—Ç health endpoint"""
        try:
            response = requests.get(f"{self.base_url}/health", timeout=5)
            self.assertEqual(response.status_code, 200)
            data = response.json()
            self.assertIn("status", data)
            self.assertEqual(data["status"], "healthy")
            self._log_success("Health Check", "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            self._log_error("Health Check", str(e))
            raise
    
    def test_02_main_page(self):
        """–¢–µ—Å—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            response = requests.get(f"{self.base_url}/", timeout=5)
            self.assertEqual(response.status_code, 200)
            self.assertIn("Crystal Bay Travel", response.text)
            self._log_success("Main Page", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
        except Exception as e:
            self._log_error("Main Page", str(e))
            raise
    
    def test_03_samo_testing_page(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã SAMO —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            response = requests.get(f"{self.base_url}/samo-testing", timeout=5)
            self.assertEqual(response.status_code, 200)
            self.assertIn("SAMO API", response.text)
            self._log_success("SAMO Testing Page", "–°—Ç—Ä–∞–Ω–∏—Ü–∞ SAMO —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
        except Exception as e:
            self._log_error("SAMO Testing Page", str(e))
            raise
    
    def test_04_diagnostics_environment(self):
        """–¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        try:
            response = requests.get(f"{self.base_url}/api/diagnostics/environment", timeout=5)
            self.assertEqual(response.status_code, 200)
            data = response.json()
            self.assertIn("environment", data)
            self.assertIn("timestamp", data)
            self._log_success("Environment Diagnostics", f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {len(data['environment'])}")
        except Exception as e:
            self._log_error("Environment Diagnostics", str(e))
            raise
    
    def test_05_diagnostics_server(self):
        """–¢–µ—Å—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{self.base_url}/api/diagnostics/server", timeout=5)
            self.assertEqual(response.status_code, 200)
            data = response.json()
            self.assertIn("external_ip", data)
            self.assertIn("python_version", data)
            self._log_success("Server Diagnostics", f"IP: {data.get('external_ip', 'Unknown')}")
        except Exception as e:
            self._log_error("Server Diagnostics", str(e))
            raise
    
    def test_06_diagnostics_network(self):
        """–¢–µ—Å—Ç —Å–µ—Ç–µ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        try:
            response = requests.get(f"{self.base_url}/api/diagnostics/network", timeout=5)
            self.assertEqual(response.status_code, 200)
            data = response.json()
            self.assertIn("network_tests", data)
            self._log_success("Network Diagnostics", "–°–µ—Ç–µ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            self._log_error("Network Diagnostics", str(e))
            raise
    
    def test_07_samo_api_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SAMO API"""
        try:
            response = requests.get(f"{self.base_url}/api/diagnostics/samo", timeout=10)
            self.assertEqual(response.status_code, 200)
            data = response.json()
            self.assertIn("tests", data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS
            if "dns_resolution" in data["tests"]:
                dns_status = data["tests"]["dns_resolution"]["status"]
                self.assertEqual(dns_status, "‚úì")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint (–º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
            if "api_endpoint" in data["tests"]:
                api_test = data["tests"]["api_endpoint"]
                if api_test["status_code"] == 403:
                    self._log_warning("SAMO API", "IP –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
                else:
                    self._log_success("SAMO API", "API –¥–æ—Å—Ç—É–ø–µ–Ω")
            
        except Exception as e:
            self._log_error("SAMO API Connection", str(e))
            raise
    
    def test_08_curl_execution(self):
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è curl –∫–æ–º–∞–Ω–¥"""
        try:
            payload = {
                "method": "SearchTour_CURRENCIES",
                "params": ""
            }
            response = requests.post(
                f"{self.base_url}/api/samo/execute-curl",
                json=payload,
                timeout=15
            )
            self.assertEqual(response.status_code, 200)
            data = response.json()
            self.assertIn("command", data)
            self.assertIn("status_code", data)
            
            if data["status_code"] == 403:
                self._log_warning("Curl Execution", "SAMO API –±–ª–æ–∫–∏—Ä—É–µ—Ç IP")
            else:
                self._log_success("Curl Execution", "Curl –∫–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è")
                
        except Exception as e:
            self._log_error("Curl Execution", str(e))
            raise
    
    def test_09_leads_api(self):
        """–¢–µ—Å—Ç API –ª–∏–¥–æ–≤"""
        try:
            response = requests.get(f"{self.base_url}/api/leads", timeout=5)
            # API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
            # –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ endpoint –æ—Ç–≤–µ—á–∞–µ—Ç
            self.assertIn(response.status_code, [200, 500])
            self._log_success("Leads API", "Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            self._log_error("Leads API", str(e))
            raise
    
    def test_10_static_files(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSS
            response = requests.get(f"{self.base_url}/static/css/style.css", timeout=5)
            self.assertIn(response.status_code, [200, 404])  # –ú–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é static
            response = requests.get(f"{self.base_url}/static/", timeout=5)
            # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ª–∏—Å—Ç–∏–Ω–≥–∞
            self._log_success("Static Files", "–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        except Exception as e:
            self._log_error("Static Files", str(e))
            # –ù–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    
    def _log_success(self, test_name, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        result = f"‚úÖ {test_name}: {message}"
        self.test_results.append(result)
        print(result)
    
    def _log_warning(self, test_name, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
        result = f"‚ö†Ô∏è  {test_name}: {message}"
        self.test_results.append(result)
        print(result)
    
    def _log_error(self, test_name, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        result = f"‚ùå {test_name}: {message}"
        self.test_results.append(result)
        print(result)
    
    @classmethod
    def tearDownClass(cls):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤"""
        print("\n" + "="*50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø Crystal Bay Travel")
        print("="*50)
        
        passed = len([r for r in cls.test_results if r.startswith("‚úÖ")])
        warnings = len([r for r in cls.test_results if r.startswith("‚ö†Ô∏è")])
        failed = len([r for r in cls.test_results if r.startswith("‚ùå")])
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {failed}")
        print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(cls.test_results)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            "timestamp": datetime.now().isoformat(),
            "summary": {
                "passed": passed,
                "warnings": warnings,
                "failed": failed,
                "total": len(cls.test_results)
            },
            "details": cls.test_results
        }
        
        with open("test_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results.json")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get("http://localhost:5000/health", timeout=5)
        print("üöÄ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")
    except:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ localhost:5000")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python main.py")
        sys.exit(1)
    
    unittest.main(verbosity=2)