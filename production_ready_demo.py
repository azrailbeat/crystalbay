#!/usr/bin/env python3
"""
Production Ready Demo - Crystal Bay Travel System
Demonstrates fully working system with realistic travel booking data
"""

import json
import os
import requests
from datetime import datetime, timedelta
import uuid

def create_realistic_leads():
    """Create realistic Crystal Bay travel leads for demonstration"""
    
    destinations = [
        {"country": "–í—å–µ—Ç–Ω–∞–º", "city": "–•–æ—à–∏–º–∏–Ω", "price_range": (800, 1200)},
        {"country": "–¢–∞–∏–ª–∞–Ω–¥", "city": "–ü—Ö—É–∫–µ—Ç", "price_range": (900, 1400)}, 
        {"country": "–¢—É—Ä—Ü–∏—è", "city": "–ê–Ω—Ç–∞–ª—å—è", "price_range": (600, 1000)},
        {"country": "–ï–≥–∏–ø–µ—Ç", "city": "–•—É—Ä–≥–∞–¥–∞", "price_range": (500, 800)},
        {"country": "–û–ê–≠", "city": "–î—É–±–∞–π", "price_range": (1200, 2000)},
        {"country": "–ú–∞–ª—å–¥–∏–≤—ã", "city": "–ú–∞–ª–µ", "price_range": (2000, 3500)},
        {"country": "–ò–Ω–¥–æ–Ω–µ–∑–∏—è", "city": "–ë–∞–ª–∏", "price_range": (1000, 1600)}
    ]
    
    departure_cities = ["–ê–ª–º–∞—Ç—ã", "–ù—É—Ä-–°—É–ª—Ç–∞–Ω", "–®—ã–º–∫–µ–Ω—Ç", "–ê–∫—Ç–æ–±–µ", "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞"]
    
    client_names = [
        "–ê–π–∂–∞–Ω –°–µ—Ä–∏–∫–æ–≤–∞", "–î–∞–Ω–∏—è—Ä –ñ—É–º–∞–±–µ–∫–æ–≤", "–ì—É–ª—å–Ω–∞—Ä–∞ –¢–æ–∫—Ç–∞—Ä–æ–≤–∞", 
        "–ê—Ä–º–∞–Ω –ë–∞–π–∂–∞–Ω–æ–≤", "–°–∞—É–ª–µ –ö–∞—Å—ã–º–æ–≤–∞", "–ï—Ä–ª–∞–Ω –ú—É—Å—Ç–∞—Ñ–∏–Ω",
        "–ñ–∞–Ω–∞—Ä–∞ –ò–±—Ä–∞–∏–º–æ–≤–∞", "–ù—É—Ä–ª–∞–Ω –ö–µ–Ω–µ—Å–æ–≤", "–ê–ª—Ç—ã–Ω–∞–π –¢—É–ª–µ–≥–µ–Ω–æ–≤–∞",
        "–ë–∞–∫—ã—Ç –†–∞—Ö–∏–º–æ–≤"
    ]
    
    realistic_leads = []
    
    for i, name in enumerate(client_names):
        destination = destinations[i % len(destinations)]
        departure = departure_cities[i % len(departure_cities)]
        
        # Generate realistic dates (future bookings)
        departure_date = datetime.now() + timedelta(days=30 + i*14)
        created_date = datetime.now() - timedelta(days=i+1)
        
        # Generate price in range
        min_price, max_price = destination["price_range"]
        price = min_price + (i * 50) % (max_price - min_price)
        
        lead = {
            "id": str(uuid.uuid4()),
            "customer_name": name,
            "email": f"{name.lower().replace(' ', '.')}@example.com",
            "phone": f"+7 7{70 + i}{100 + i:02d} {200 + i:02d} {300 + i:02d}",
            "destination": f"{destination['country']} - {destination['city']}",
            "departure_city": departure,
            "departure_date": departure_date.strftime('%Y-%m-%d'),
            "nights": 7 + (i % 7),
            "adults": 2 + (i % 2),
            "children": i % 3,
            "tour_type": ["–ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö", "–≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π", "–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"][i % 3],
            "price": price,
            "currency": "USD",
            "status": ["new", "in_progress", "pending", "confirmed"][i % 4],
            "source": "website",
            "created_at": created_date.isoformat(),
            "notes": f"Crystal Bay Travel - –∑–∞—è–≤–∫–∞ –Ω–∞ {destination['country']}. "
                    f"–í—ã–ª–µ—Ç –∏–∑ {departure}. "
                    f"{7 + (i % 7)} –¥–Ω–µ–π, {2 + (i % 2)} –≤–∑—Ä–æ—Å–ª—ã—Ö"
                    + (f", {i % 3} –¥–µ—Ç–µ–π" if i % 3 > 0 else "") + ".",
            "agent_assigned": ["–ú–µ–Ω–µ–¥–∂–µ—Ä 1", "–ú–µ–Ω–µ–¥–∂–µ—Ä 2", "–ú–µ–Ω–µ–¥–∂–µ—Ä 3"][i % 3],
            "priority": ["normal", "high", "urgent"][i % 3] if i % 4 == 3 else "normal",
            "tags": [
                destination['country'],
                departure,
                "–ê–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞" if i % 4 != 0 else "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
            ]
        }
        
        realistic_leads.append(lead)
    
    return realistic_leads

def update_system_with_production_data():
    """Update the Crystal Bay system with realistic production data"""
    
    print("üèñÔ∏è CRYSTAL BAY TRAVEL - –ó–ê–ì–†–£–ó–ö–ê –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # Create realistic leads
    leads = create_realistic_leads()
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(leads)} —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫ Crystal Bay")
    
    # Update persistent storage
    storage_file = 'data/memory_leads.json'
    os.makedirs('data', exist_ok=True)
    
    # Load existing data and merge
    existing_leads = []
    if os.path.exists(storage_file):
        try:
            with open(storage_file, 'r', encoding='utf-8') as f:
                existing_leads = json.load(f)
        except:
            pass
    
    # Merge with new realistic data (replace system entries)
    final_leads = [lead for lead in existing_leads if lead.get('source') != 'system']
    final_leads.extend(leads)
    
    # Save to storage
    with open(storage_file, 'w', encoding='utf-8') as f:
        json.dump(final_leads, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(final_leads)} –∑–∞—è–≤–æ–∫ –≤ {storage_file}")
    
    # Display sample data
    print("\nüìã –û–ë–†–ê–ó–¶–´ –ó–ê–Ø–í–û–ö:")
    print("-" * 40)
    
    for i, lead in enumerate(leads[:5]):  # Show first 5
        status_icon = {"new": "üÜï", "in_progress": "‚è≥", "pending": "‚è∞", "confirmed": "‚úÖ"}
        icon = status_icon.get(lead['status'], "üìù")
        
        print(f"{icon} {lead['customer_name']}")
        print(f"   üìç {lead['destination']}")
        print(f"   üõ´ –í—ã–ª–µ—Ç: {lead['departure_date']} –∏–∑ {lead['departure_city']}")
        print(f"   üí∞ {lead['price']} {lead['currency']} - {lead['nights']} –Ω–æ—á–µ–π")
        print(f"   üìû {lead['phone']}")
        print()
    
    # Test API integration
    print("üîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("-" * 40)
    
    try:
        # Test leads endpoint
        response = requests.get("http://localhost:5000/api/leads", timeout=5)
        if response.status_code == 200:
            api_leads = response.json()
            print(f"‚úÖ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {len(api_leads)} –∑–∞—è–≤–æ–∫")
        else:
            print(f"‚ö†Ô∏è API —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    print("\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢")
    print("-" * 40)
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ Crystal Bay")
    print("‚úÖ –í—Å–µ –∑–∞—è–≤–∫–∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Kanban –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º") 
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    status_counts = {}
    for lead in leads:
        status = lead['status']
        status_counts[status] = status_counts.get(status, 0) + 1
    
    for status, count in status_counts.items():
        print(f"   {status.capitalize()}: {count} –∑–∞—è–≤–æ–∫")
    
    return len(final_leads)

if __name__ == '__main__':
    update_system_with_production_data()